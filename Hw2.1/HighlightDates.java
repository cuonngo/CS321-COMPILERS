/* The following code was generated by JFlex 1.4.3 on 2/2/16 12:56 PM */

// CS321-hw2 Cuong Ngo
// Highlight Dates from text

/** This is an example of dates highlighting program for any
 *  text file language that has been written using the jflex **/

class HighlightDates {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\46\2\0\1\1\22\0\1\50\1\0\1\47\11\0\1\44"+
    "\2\0\1\45\1\11\1\13\1\12\1\23\1\40\1\24\1\14\1\26"+
    "\1\26\1\14\7\0\1\27\2\0\1\35\1\0\1\2\3\0\1\15"+
    "\2\0\1\17\1\42\1\33\3\0\1\41\15\0\1\7\1\4\1\20"+
    "\1\35\1\3\1\2\1\30\1\21\1\37\1\15\1\0\1\25\1\22"+
    "\1\16\1\34\1\36\1\0\1\5\1\31\1\32\1\6\1\43\2\0"+
    "\1\10\uff86\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\21\1\127\0\3\2\12\0\3\2\2\0\3\2"+
    "\46\0\3\3\7\0\6\3\22\0\1\2\3\0\1\2"+
    "\2\0\1\3\10\0\4\2\1\3\2\2\7\0\1\2"+
    "\12\0\3\2\7\0\6\2\22\0\1\3\3\0\1\3"+
    "\21\0\1\3\4\0\1\2\1\0\1\2\1\0\4\2"+
    "\2\0\7\2\16\0\1\2\3\0\1\2\21\0\1\2"+
    "\4\0\1\3\1\0\1\3\1\0\4\3\2\0\7\3"+
    "\21\0\3\2\4\0\1\2\1\0\1\2\1\0\4\2"+
    "\2\0\7\2\21\0\3\3\10\0\2\3\13\0\3\2"+
    "\10\0\2\3\11\0\2\3\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af"+
    "\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7"+
    "\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f"+
    "\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787"+
    "\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf"+
    "\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17"+
    "\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f"+
    "\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7"+
    "\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def"+
    "\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37"+
    "\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056\0\u107f"+
    "\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7"+
    "\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6\0\u130f"+
    "\0\u1338\0\u1361\0\u138a\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u1457"+
    "\0\u1480\0\u14a9\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f"+
    "\0\u15c8\0\u15f1\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7"+
    "\0\u1710\0\u1739\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f"+
    "\0\u1858\0\u1881\0\u18aa\0\u18d3\0\u18fc\0\u1925\0\u194e\0\u1977"+
    "\0\u19a0\0\u19c9\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d\0\u1a96\0\u1abf"+
    "\0\u1ae8\0\u1b11\0\u1b3a\0\u1b63\0\u1b8c\0\u1bb5\0\u1bde\0\u1c07"+
    "\0\u1c30\0\u1c59\0\u1c82\0\u1cab\0\u1cd4\0\u1cfd\0\u1d26\0\u1d4f"+
    "\0\u1d78\0\u1da1\0\u1dca\0\u1df3\0\u1e1c\0\u1e45\0\u1e6e\0\u1e97"+
    "\0\u1ec0\0\u1ee9\0\u1f12\0\u1f3b\0\u1f64\0\u1f8d\0\u1fb6\0\u1fdf"+
    "\0\u2008\0\u2031\0\u205a\0\u2083\0\u20ac\0\u02b9\0\u20d5\0\u20fe"+
    "\0\u2127\0\u2150\0\u2179\0\u21a2\0\u21cb\0\u21f4\0\u221d\0\u2246"+
    "\0\u226f\0\u2298\0\u22c1\0\u22ea\0\u2313\0\u233c\0\u2365\0\u238e"+
    "\0\u23b7\0\u23e0\0\u2409\0\u2432\0\u245b\0\u2484\0\u24ad\0\u24d6"+
    "\0\u24ff\0\u2528\0\u2551\0\u257a\0\u25a3\0\u25cc\0\u25f5\0\u261e"+
    "\0\u2647\0\u2670\0\u2699\0\u26c2\0\u26eb\0\u2714\0\u273d\0\u2766"+
    "\0\u278f\0\u27b8\0\u27e1\0\u280a\0\u2833\0\u285c\0\u2885\0\u28ae"+
    "\0\u28d7\0\u2900\0\u2929\0\u2952\0\u297b\0\u29a4\0\u29cd\0\u29f6"+
    "\0\u2a1f\0\u2a48\0\u2a71\0\u2a9a\0\u2ac3\0\u2aec\0\u2b15\0\u2b3e"+
    "\0\u2b67\0\u2b90\0\u2bb9\0\u2be2\0\u2c0b\0\u2c34\0\u2c5d\0\u2c86"+
    "\0\u2caf\0\u2cd8\0\u2d01\0\u2d2a\0\u2d53\0\u2d7c\0\u2da5\0\u2dce"+
    "\0\u2df7\0\u2e20\0\u2e49\0\u2e72\0\u2e9b\0\u2ec4\0\u2eed\0\u2f16"+
    "\0\u2f3f\0\u2f68\0\u2f91\0\u2fba\0\u2fe3\0\u300c\0\u3035\0\u305e"+
    "\0\u3087\0\u30b0\0\u30d9\0\u3102\0\u312b\0\u3154\0\u317d\0\u31a6"+
    "\0\u31cf\0\u31f8\0\u3221\0\u324a\0\u3273\0\u329c\0\u32c5\0\u32ee"+
    "\0\u3317\0\u3340\0\u3369\0\u3392\0\u33bb\0\u33e4\0\u340d\0\u3436"+
    "\0\u345f\0\u3488\0\u34b1\0\u34da\0\u3503\0\u352c\0\u3555\0\u357e"+
    "\0\u35a7\0\u35d0\0\u35f9\0\u3622\0\u364b\0\u3674\0\u369d\0\u36c6"+
    "\0\u36ef\0\u3718\0\u3741\0\u376a\0\u3793\0\u37bc\0\u37e5\0\u380e"+
    "\0\u3837\0\u3860\0\u3889\0\u38b2\0\u38db\0\u3904\0\u392d\0\u3956"+
    "\0\u397f\0\u39a8\0\u39d1\0\u39fa\0\u3a23\0\u3a4c\0\u3a75\0\u3a9e"+
    "\0\u3ac7\0\u3af0\0\u3b19\0\u3b42\0\u3b6b\0\u3b94\0\u3bbd\0\u3be6"+
    "\0\u3c0f\0\u3c38\0\u3c61\0\u3c8a\0\u3cb3\0\u3cdc\0\u3d05\0\u3d2e"+
    "\0\u3d57\0\u3d80\0\u3da9\0\u3dd2\0\u3dfb\0\u3e24\0\u3e4d\0\u3e76"+
    "\0\u3e9f\0\u3ec8\0\u3ef1\0\u3f1a\0\u3f43\0\u3f6c\0\u3f95\0\u3fbe"+
    "\0\u3fe7\0\u4010\0\u4039\0\u4062\0\u408b\0\u40b4\0\u40dd\0\u4106"+
    "\0\u412f\0\u4158\0\u4181\0\u41aa\0\u41d3\0\u41fc\0\u4225\0\u424e"+
    "\0\u4277\0\u42a0\0\u42c9\0\u42f2\0\u431b\0\u4344\0\u436d\0\u4396"+
    "\0\u43bf\0\u43e8\0\u4411\0\u443a\0\u4463\0\u448c\0\u44b5\0\u44de"+
    "\0\u4507\0\u4530\0\u4559\0\u4582\0\u45ab\0\u45d4\0\u45fd\0\u4626"+
    "\0\u464f\0\u4678\0\u46a1\0\u46ca\0\u329c\0\u4678\0\u46f3\0\u471c"+
    "\0\u4745\0\u476e\0\u4797\0\u47c0\0\u47e9\0\u4812\0\u483b\0\u4864"+
    "\0\u488d\0\u4530\0\u48b6\0\u48df\0\u4908\0\u4931\0\u495a\0\u4983"+
    "\0\u49ac\0\u49d5\0\u49fe\0\u4a27\0\u3be6\0\u49d5\0\u4a50\0\u4a79"+
    "\0\u4aa2\0\u4acb\0\u4af4\0\u4b1d\0\u4b46\0\u4b6f\0\u4b98\0\u4277"+
    "\0\u4b46\0\u4bc1\0\u4bea\0\u4c13\0\u4c3c\0\u4c65\0\u4c8e\0\u4cb7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\4\2\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\2\1\13\1\14\1\15"+
    "\1\2\1\15\1\4\1\2\1\16\1\2\2\17\1\20"+
    "\2\2\1\10\1\16\1\12\3\2\1\21\2\22\2\0"+
    "\1\23\4\0\1\24\1\0\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\0\1\33\1\34\1\35\1\0"+
    "\1\35\1\24\1\0\1\36\1\0\2\37\1\40\2\0"+
    "\1\30\1\36\1\32\10\0\1\23\1\41\3\0\1\24"+
    "\1\0\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\0\1\33\1\34\1\35\1\0\1\35\1\24\1\0"+
    "\1\36\1\0\2\37\1\40\2\0\1\30\1\36\1\32"+
    "\10\0\1\23\3\0\1\42\1\24\1\0\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\0\1\33\1\34"+
    "\1\35\1\0\1\35\1\24\1\0\1\36\1\0\2\37"+
    "\1\40\1\43\1\0\1\30\1\36\1\32\10\0\1\23"+
    "\4\0\1\24\1\0\1\44\1\45\1\46\1\47\1\31"+
    "\1\32\1\33\2\0\1\33\1\50\1\51\1\0\1\51"+
    "\1\24\1\0\1\36\1\0\2\37\1\40\2\0\1\47"+
    "\1\36\1\32\7\0\1\52\1\23\4\0\1\24\1\0"+
    "\1\44\1\53\1\54\1\55\1\31\1\32\1\33\2\0"+
    "\1\33\1\56\1\57\1\0\1\57\1\24\1\0\1\36"+
    "\1\0\2\37\1\40\2\0\1\55\1\36\1\32\2\0"+
    "\1\60\1\52\1\0\1\52\1\0\1\61\1\23\4\0"+
    "\1\24\1\0\1\62\1\63\1\64\1\55\1\31\1\32"+
    "\1\33\2\0\1\33\1\56\1\57\1\0\1\57\1\24"+
    "\1\0\1\36\1\0\2\37\1\40\2\0\1\55\1\36"+
    "\1\32\2\0\1\65\1\61\1\0\1\61\1\0\1\66"+
    "\1\23\4\0\1\24\1\0\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\0\1\33\1\34\1\35\1\0"+
    "\1\35\1\24\1\0\1\36\1\0\2\37\1\40\2\0"+
    "\1\30\1\36\1\32\2\0\1\67\1\66\1\0\1\66"+
    "\2\0\1\23\3\0\1\70\1\71\1\0\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\0\1\33\1\34"+
    "\1\35\1\0\1\35\1\24\1\0\1\36\1\0\2\37"+
    "\1\40\2\0\1\30\1\36\1\32\10\0\1\23\4\0"+
    "\1\24\1\0\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\2\0\1\33\1\34\1\35\1\0\1\35\1\24"+
    "\1\0\1\36\1\0\1\37\1\72\1\40\2\0\1\30"+
    "\1\36\1\32\10\0\1\23\4\0\1\73\1\0\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\0\1\33"+
    "\1\34\1\35\1\0\1\35\1\24\1\0\1\36\1\0"+
    "\2\37\1\40\2\0\1\30\1\36\1\32\7\0\1\61"+
    "\1\23\4\0\1\24\1\0\1\74\1\26\1\75\1\30"+
    "\1\31\1\32\1\33\2\0\1\33\1\34\1\35\1\0"+
    "\1\35\1\24\1\0\1\36\1\0\2\37\1\40\2\0"+
    "\1\30\1\36\1\32\2\0\1\65\1\61\1\0\1\61"+
    "\1\0\1\61\1\23\4\0\1\24\1\0\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\0\1\33\1\34"+
    "\1\35\1\0\1\35\1\24\1\0\1\36\1\0\2\37"+
    "\1\40\2\0\1\30\1\36\1\32\2\0\1\65\1\61"+
    "\1\0\1\61\2\0\1\23\1\76\3\0\1\24\1\0"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\2\0"+
    "\1\33\1\34\1\35\1\0\1\35\1\24\1\0\1\36"+
    "\1\0\2\37\1\40\2\0\1\30\1\36\1\32\10\0"+
    "\1\23\4\0\1\24\1\0\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\77\1\0\1\33\1\34\1\35"+
    "\1\0\1\35\1\24\1\0\1\36\1\0\2\37\1\40"+
    "\2\0\1\30\1\36\1\32\10\0\1\23\1\100\3\0"+
    "\1\24\1\0\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\2\0\1\33\1\34\1\35\1\0\1\35\1\24"+
    "\1\0\1\36\1\0\2\37\1\40\2\0\1\30\1\36"+
    "\1\32\10\0\1\101\4\0\1\102\1\0\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\2\0\1\111\1\112"+
    "\1\113\1\0\1\113\1\102\1\0\1\114\1\0\2\115"+
    "\1\116\2\0\1\106\1\114\1\110\62\0\1\117\53\0"+
    "\1\120\27\0\1\121\23\0\1\122\1\123\1\35\1\30"+
    "\6\0\2\35\1\0\1\35\11\0\1\30\11\0\1\124"+
    "\7\0\4\122\6\0\2\122\1\0\1\122\11\0\1\122"+
    "\4\0\1\125\1\124\1\0\1\124\1\0\1\126\7\0"+
    "\2\35\1\30\1\122\6\0\2\122\1\0\1\122\11\0"+
    "\1\122\4\0\1\127\1\126\1\0\1\126\1\0\1\130"+
    "\43\0\1\131\1\130\1\0\1\130\6\0\1\132\1\133"+
    "\75\0\1\134\23\0\1\135\42\0\1\126\7\0\1\136"+
    "\1\0\1\137\31\0\1\127\1\126\1\0\1\126\1\0"+
    "\1\126\43\0\1\127\1\126\1\0\1\126\3\0\1\140"+
    "\65\0\1\141\33\0\1\142\51\0\1\143\74\0\1\144"+
    "\25\0\1\145\44\0\1\146\7\0\1\122\1\123\1\35"+
    "\1\30\6\0\2\35\1\0\1\35\11\0\1\30\5\0"+
    "\1\146\1\0\1\146\1\0\1\52\7\0\4\122\6\0"+
    "\2\122\1\0\1\122\11\0\1\122\4\0\1\60\1\52"+
    "\1\0\1\52\1\0\1\61\7\0\2\35\1\30\1\122"+
    "\6\0\2\122\1\0\1\122\11\0\1\122\4\0\1\65"+
    "\1\61\1\0\1\61\1\0\1\66\43\0\1\67\1\66"+
    "\1\0\1\66\1\0\1\61\7\0\1\136\1\0\1\137"+
    "\31\0\1\65\1\61\1\0\1\61\1\0\1\61\43\0"+
    "\1\65\1\61\1\0\1\61\1\0\1\52\1\147\4\0"+
    "\1\150\1\0\1\151\1\152\1\153\1\154\1\155\1\156"+
    "\1\157\2\0\1\157\2\154\1\0\1\154\1\150\1\0"+
    "\1\160\1\0\2\161\1\162\2\0\1\154\1\160\1\156"+
    "\3\0\1\52\1\0\1\52\1\0\1\163\7\0\4\122"+
    "\6\0\2\122\1\0\1\122\11\0\1\122\4\0\1\125"+
    "\1\163\1\0\1\163\1\0\1\164\7\0\2\35\1\30"+
    "\1\122\6\0\2\122\1\0\1\122\11\0\1\122\4\0"+
    "\1\127\1\164\1\0\1\164\1\0\1\165\43\0\1\131"+
    "\1\165\1\0\1\165\1\0\1\164\7\0\1\136\1\0"+
    "\1\137\31\0\1\127\1\164\1\0\1\164\1\0\1\164"+
    "\43\0\1\127\1\164\1\0\1\164\11\0\1\166\2\167"+
    "\1\170\6\0\2\170\1\0\1\170\11\0\1\170\11\0"+
    "\1\61\1\147\4\0\1\150\1\0\1\151\1\152\1\153"+
    "\1\154\1\155\1\156\1\157\2\0\1\157\1\171\1\154"+
    "\1\0\1\154\1\150\1\0\1\160\1\0\2\161\1\162"+
    "\2\0\1\154\1\160\1\156\3\0\1\61\1\0\1\61"+
    "\1\0\1\61\7\0\1\122\1\123\1\35\1\30\6\0"+
    "\2\35\1\0\1\35\11\0\1\30\4\0\1\65\1\61"+
    "\1\0\1\61\1\0\1\61\7\0\4\122\6\0\2\122"+
    "\1\0\1\122\11\0\1\122\4\0\1\65\1\61\1\0"+
    "\1\61\1\0\1\172\7\0\2\35\1\30\1\122\6\0"+
    "\2\122\1\0\1\122\11\0\1\122\4\0\1\173\1\172"+
    "\1\0\1\172\11\0\1\166\2\167\1\170\6\0\1\174"+
    "\1\170\1\0\1\170\11\0\1\170\11\0\1\66\1\147"+
    "\4\0\1\150\1\0\1\151\1\152\1\153\1\154\1\155"+
    "\1\156\1\157\2\0\1\157\1\175\1\154\1\0\1\154"+
    "\1\150\1\0\1\160\1\0\2\161\1\162\2\0\1\154"+
    "\1\160\1\156\3\0\1\66\1\0\1\66\11\0\1\166"+
    "\2\167\1\170\6\0\1\176\1\170\1\0\1\170\11\0"+
    "\1\170\26\0\1\177\6\0\1\200\31\0\1\120\7\0"+
    "\1\201\17\0\1\121\32\0\1\141\22\0\1\202\12\0"+
    "\1\203\1\120\1\0\1\204\25\0\1\121\13\0\1\205"+
    "\7\0\1\122\1\123\1\35\1\30\6\0\2\35\1\0"+
    "\1\35\11\0\1\30\5\0\1\205\1\0\1\205\1\0"+
    "\1\206\7\0\2\35\1\30\1\122\6\0\2\122\1\0"+
    "\1\122\11\0\1\122\4\0\1\127\1\206\1\0\1\206"+
    "\36\0\1\207\44\0\1\210\36\0\1\211\33\0\1\212"+
    "\53\0\1\213\27\0\1\214\23\0\1\215\1\216\1\113"+
    "\1\106\6\0\2\113\1\0\1\113\11\0\1\106\11\0"+
    "\1\217\7\0\4\215\6\0\2\215\1\0\1\215\11\0"+
    "\1\215\4\0\1\220\1\217\1\0\1\217\1\0\1\221"+
    "\7\0\2\113\1\106\1\215\6\0\2\215\1\0\1\215"+
    "\11\0\1\215\4\0\1\222\1\221\1\0\1\221\1\0"+
    "\1\223\43\0\1\224\1\223\1\0\1\223\6\0\1\225"+
    "\1\226\75\0\1\227\23\0\1\230\42\0\1\221\7\0"+
    "\1\231\1\0\1\232\31\0\1\222\1\221\1\0\1\221"+
    "\1\0\1\221\43\0\1\222\1\221\1\0\1\221\3\0"+
    "\1\233\65\0\1\234\33\0\1\235\51\0\1\236\74\0"+
    "\1\237\25\0\1\240\44\0\1\241\44\0\1\241\1\0"+
    "\1\241\1\0\1\124\43\0\1\125\1\124\1\0\1\124"+
    "\1\0\1\124\1\242\4\0\1\243\1\0\1\244\1\245"+
    "\1\246\1\247\1\250\1\251\1\252\2\0\1\252\2\247"+
    "\1\0\1\247\1\243\1\0\1\253\1\0\2\254\1\255"+
    "\2\0\1\247\1\253\1\251\3\0\1\124\1\0\1\124"+
    "\11\0\1\256\2\257\1\260\6\0\2\260\1\0\1\260"+
    "\11\0\1\260\11\0\1\126\1\242\4\0\1\243\1\0"+
    "\1\244\1\245\1\246\1\247\1\250\1\251\1\252\2\0"+
    "\1\252\1\261\1\247\1\0\1\247\1\243\1\0\1\253"+
    "\1\0\2\254\1\255\2\0\1\247\1\253\1\251\3\0"+
    "\1\126\1\0\1\126\11\0\1\256\2\257\1\260\6\0"+
    "\1\262\1\260\1\0\1\260\11\0\1\260\11\0\1\130"+
    "\1\242\4\0\1\243\1\0\1\244\1\245\1\246\1\247"+
    "\1\250\1\251\1\252\2\0\1\252\1\263\1\247\1\0"+
    "\1\247\1\243\1\0\1\253\1\0\2\254\1\255\2\0"+
    "\1\247\1\253\1\251\3\0\1\130\1\0\1\130\11\0"+
    "\1\256\2\257\1\260\6\0\1\264\1\260\1\0\1\260"+
    "\11\0\1\260\26\0\1\265\6\0\1\266\41\0\1\267"+
    "\75\0\1\270\12\0\1\271\2\0\1\272\41\0\1\273"+
    "\44\0\1\273\1\0\1\273\1\0\1\274\44\0\1\274"+
    "\1\0\1\274\36\0\1\275\44\0\1\276\36\0\1\277"+
    "\31\0\1\300\3\0\1\301\37\0\1\60\1\300\1\0"+
    "\1\300\1\0\1\302\4\0\1\303\36\0\1\65\1\302"+
    "\1\0\1\302\1\0\1\304\35\0\1\305\5\0\1\67"+
    "\1\304\1\0\1\304\1\0\1\146\1\147\4\0\1\150"+
    "\1\0\1\306\1\154\1\307\1\154\1\155\1\156\1\157"+
    "\2\0\1\157\2\154\1\0\1\154\1\150\1\0\1\160"+
    "\1\0\2\161\1\162\2\0\1\154\1\160\1\156\3\0"+
    "\1\146\1\0\1\146\3\0\1\310\53\0\1\311\27\0"+
    "\1\312\23\0\1\313\3\154\6\0\2\154\1\0\1\154"+
    "\11\0\1\154\11\0\1\314\7\0\4\313\6\0\2\313"+
    "\1\0\1\313\11\0\1\313\3\0\1\315\1\316\1\314"+
    "\1\0\1\314\1\0\1\314\7\0\3\154\1\313\6\0"+
    "\2\313\1\0\1\313\11\0\1\313\3\0\1\315\1\316"+
    "\1\314\1\0\1\314\1\0\1\314\7\0\4\316\6\0"+
    "\2\316\1\0\1\316\11\0\1\316\3\0\1\315\1\316"+
    "\1\314\1\0\1\314\6\0\1\317\1\320\75\0\1\321"+
    "\23\0\1\322\44\0\1\323\65\0\1\324\33\0\1\325"+
    "\46\0\1\163\1\147\4\0\1\150\1\0\1\326\1\327"+
    "\1\330\1\154\1\155\1\156\1\157\2\0\1\157\2\154"+
    "\1\0\1\154\1\150\1\0\1\160\1\0\2\161\1\162"+
    "\2\0\1\154\1\160\1\156\3\0\1\163\1\0\1\163"+
    "\1\0\1\164\1\147\4\0\1\150\1\0\1\326\1\327"+
    "\1\330\1\154\1\155\1\156\1\157\2\0\1\157\1\331"+
    "\1\154\1\0\1\154\1\150\1\0\1\160\1\0\2\161"+
    "\1\162\2\0\1\154\1\160\1\156\3\0\1\164\1\0"+
    "\1\164\1\0\1\165\1\147\4\0\1\150\1\0\1\326"+
    "\1\327\1\330\1\154\1\155\1\156\1\157\2\0\1\157"+
    "\1\332\1\154\1\0\1\154\1\150\1\0\1\160\1\0"+
    "\2\161\1\162\2\0\1\154\1\160\1\156\3\0\1\165"+
    "\1\0\1\165\11\0\4\170\6\0\2\170\1\0\1\170"+
    "\11\0\1\170\21\0\4\170\6\0\2\170\1\0\1\170"+
    "\11\0\1\170\4\0\1\333\14\0\4\316\6\0\2\316"+
    "\1\0\1\316\11\0\1\316\4\0\1\333\4\0\1\314"+
    "\7\0\1\313\1\316\1\313\1\316\6\0\2\316\1\0"+
    "\1\316\11\0\1\316\3\0\1\315\1\316\1\314\1\0"+
    "\1\314\1\0\1\172\1\147\4\0\1\150\1\0\1\151"+
    "\1\152\1\153\1\154\1\155\1\156\1\157\2\0\1\157"+
    "\1\334\1\154\1\0\1\154\1\150\1\0\1\160\1\0"+
    "\2\161\1\162\2\0\1\154\1\160\1\156\3\0\1\172"+
    "\1\0\1\172\11\0\1\166\2\167\1\170\6\0\1\335"+
    "\1\170\1\0\1\170\11\0\1\170\21\0\1\170\1\316"+
    "\1\170\1\316\6\0\2\316\1\0\1\316\11\0\1\316"+
    "\4\0\1\333\4\0\1\314\7\0\1\313\3\316\6\0"+
    "\2\316\1\0\1\316\11\0\1\316\3\0\1\315\1\316"+
    "\1\314\1\0\1\314\11\0\1\170\3\316\6\0\2\316"+
    "\1\0\1\316\11\0\1\316\4\0\1\333\4\0\1\304"+
    "\1\0\1\336\41\0\1\67\1\304\1\0\1\304\1\0"+
    "\1\302\6\0\1\204\34\0\1\65\1\302\1\0\1\302"+
    "\1\0\1\302\4\0\1\337\36\0\1\65\1\302\1\0"+
    "\1\302\1\0\1\304\1\0\1\340\41\0\1\67\1\304"+
    "\1\0\1\304\1\0\1\302\16\0\1\341\24\0\1\65"+
    "\1\302\1\0\1\302\1\0\1\302\43\0\1\65\1\302"+
    "\1\0\1\302\1\0\1\205\5\0\1\150\1\0\1\342"+
    "\1\0\1\307\1\154\1\155\1\156\1\157\2\0\1\157"+
    "\2\154\1\0\1\154\1\150\1\0\1\160\1\0\2\161"+
    "\1\162\2\0\1\154\1\160\1\156\3\0\1\205\1\0"+
    "\1\205\1\0\1\206\1\242\4\0\1\343\1\0\1\344"+
    "\1\245\1\345\1\247\1\346\1\251\1\157\2\0\1\157"+
    "\1\331\1\154\1\0\1\154\1\343\1\0\1\253\1\0"+
    "\2\161\1\162\2\0\1\247\1\253\1\251\3\0\1\206"+
    "\1\0\1\206\1\0\1\304\30\0\1\202\12\0\1\67"+
    "\1\304\1\0\1\304\1\0\1\302\32\0\1\347\10\0"+
    "\1\65\1\302\1\0\1\302\1\0\1\302\1\0\1\350"+
    "\41\0\1\65\1\302\1\0\1\302\4\0\1\351\74\0"+
    "\1\352\25\0\1\353\44\0\1\354\44\0\1\354\1\0"+
    "\1\354\1\0\1\217\43\0\1\220\1\217\1\0\1\217"+
    "\1\0\1\217\1\355\4\0\1\356\1\0\1\357\1\360"+
    "\1\361\1\362\1\363\1\364\1\365\2\0\1\365\2\362"+
    "\1\0\1\362\1\356\1\0\1\366\1\0\2\367\1\370"+
    "\2\0\1\362\1\366\1\364\3\0\1\217\1\0\1\217"+
    "\11\0\1\371\2\372\1\373\6\0\2\373\1\0\1\373"+
    "\11\0\1\373\11\0\1\221\1\355\4\0\1\356\1\0"+
    "\1\357\1\360\1\361\1\362\1\363\1\364\1\365\2\0"+
    "\1\365\1\374\1\362\1\0\1\362\1\356\1\0\1\366"+
    "\1\0\2\367\1\370\2\0\1\362\1\366\1\364\3\0"+
    "\1\221\1\0\1\221\11\0\1\371\2\372\1\373\6\0"+
    "\1\375\1\373\1\0\1\373\11\0\1\373\11\0\1\223"+
    "\1\355\4\0\1\356\1\0\1\357\1\360\1\361\1\362"+
    "\1\363\1\364\1\365\2\0\1\365\1\376\1\362\1\0"+
    "\1\362\1\356\1\0\1\366\1\0\2\367\1\370\2\0"+
    "\1\362\1\366\1\364\3\0\1\223\1\0\1\223\11\0"+
    "\1\371\2\372\1\373\6\0\1\377\1\373\1\0\1\373"+
    "\11\0\1\373\26\0\1\u0100\6\0\1\u0101\41\0\1\u0102"+
    "\75\0\1\u0103\12\0\1\u0104\2\0\1\u0105\41\0\1\u0106"+
    "\44\0\1\u0106\1\0\1\u0106\1\0\1\u0107\44\0\1\u0107"+
    "\1\0\1\u0107\36\0\1\u0108\44\0\1\u0109\36\0\1\u010a"+
    "\31\0\1\u010b\3\0\1\u010c\37\0\1\125\1\u010b\1\0"+
    "\1\u010b\1\0\1\u010d\4\0\1\u010e\36\0\1\127\1\u010d"+
    "\1\0\1\u010d\1\0\1\u010f\35\0\1\u0110\5\0\1\131"+
    "\1\u010f\1\0\1\u010f\1\0\1\241\1\242\4\0\1\243"+
    "\1\0\1\u0111\1\247\1\u0112\1\247\1\250\1\251\1\252"+
    "\2\0\1\252\2\247\1\0\1\247\1\243\1\0\1\253"+
    "\1\0\2\254\1\255\2\0\1\247\1\253\1\251\3\0"+
    "\1\241\1\0\1\241\3\0\1\u0113\53\0\1\u0114\27\0"+
    "\1\u0115\23\0\1\u0116\3\247\6\0\2\247\1\0\1\247"+
    "\11\0\1\247\11\0\1\u0117\7\0\4\u0116\6\0\2\u0116"+
    "\1\0\1\u0116\11\0\1\u0116\3\0\1\u0118\1\0\1\u0117"+
    "\1\0\1\u0117\1\0\1\u0117\7\0\3\247\1\u0116\6\0"+
    "\2\u0116\1\0\1\u0116\11\0\1\u0116\3\0\1\u0118\1\0"+
    "\1\u0117\1\0\1\u0117\1\0\1\u0117\7\0\4\316\6\0"+
    "\2\316\1\0\1\316\11\0\1\316\3\0\1\u0118\1\0"+
    "\1\u0117\1\0\1\u0117\6\0\1\u0119\1\u011a\75\0\1\u011b"+
    "\23\0\1\u011c\44\0\1\u011d\65\0\1\u011e\33\0\1\u011f"+
    "\56\0\4\260\6\0\2\260\1\0\1\260\11\0\1\260"+
    "\21\0\4\260\6\0\2\260\1\0\1\260\11\0\1\260"+
    "\4\0\1\u0120\14\0\4\316\6\0\2\316\1\0\1\316"+
    "\11\0\1\316\4\0\1\u0120\4\0\1\u0117\7\0\1\u0116"+
    "\1\316\1\u0116\1\316\6\0\2\316\1\0\1\316\11\0"+
    "\1\316\3\0\1\u0118\1\0\1\u0117\1\0\1\u0117\11\0"+
    "\1\260\1\316\1\260\1\316\6\0\2\316\1\0\1\316"+
    "\11\0\1\316\4\0\1\u0120\4\0\1\u0117\7\0\1\u0116"+
    "\3\316\6\0\2\316\1\0\1\316\11\0\1\316\3\0"+
    "\1\u0118\1\0\1\u0117\1\0\1\u0117\11\0\1\260\3\316"+
    "\6\0\2\316\1\0\1\316\11\0\1\316\4\0\1\u0120"+
    "\4\0\1\u010f\1\0\1\u0121\41\0\1\131\1\u010f\1\0"+
    "\1\u010f\1\0\1\u010d\6\0\1\272\34\0\1\127\1\u010d"+
    "\1\0\1\u010d\1\0\1\u010d\4\0\1\u0122\36\0\1\127"+
    "\1\u010d\1\0\1\u010d\1\0\1\u010f\1\0\1\u0123\41\0"+
    "\1\131\1\u010f\1\0\1\u010f\1\0\1\u010d\16\0\1\u0124"+
    "\24\0\1\127\1\u010d\1\0\1\u010d\1\0\1\u010d\43\0"+
    "\1\127\1\u010d\1\0\1\u010d\1\0\1\273\5\0\1\243"+
    "\1\0\1\u0125\1\0\1\u0112\1\247\1\250\1\251\1\252"+
    "\2\0\1\252\2\247\1\0\1\247\1\243\1\0\1\253"+
    "\1\0\2\254\1\255\2\0\1\247\1\253\1\251\3\0"+
    "\1\273\1\0\1\273\1\0\1\274\5\0\1\u0126\1\0"+
    "\1\u0127\1\0\1\u0128\1\0\1\u0129\1\0\1\252\2\0"+
    "\1\252\2\247\1\0\1\247\1\u0126\3\0\2\254\1\255"+
    "\10\0\1\274\1\0\1\274\1\0\1\u010f\30\0\1\270"+
    "\12\0\1\131\1\u010f\1\0\1\u010f\1\0\1\u010d\32\0"+
    "\1\u012a\10\0\1\127\1\u010d\1\0\1\u010d\1\0\1\u010d"+
    "\1\0\1\u012b\41\0\1\127\1\u010d\1\0\1\u010d\1\0"+
    "\1\300\7\0\1\u012c\2\u012d\1\313\6\0\2\313\1\0"+
    "\1\313\11\0\1\313\5\0\1\300\1\0\1\300\6\0"+
    "\1\u012e\43\0\1\302\7\0\1\u012c\2\u012d\1\313\6\0"+
    "\1\u012f\1\313\1\0\1\313\11\0\1\313\5\0\1\302"+
    "\1\0\1\302\31\0\1\u0130\20\0\1\304\7\0\1\u012c"+
    "\2\u012d\1\313\6\0\1\u0131\1\313\1\0\1\313\11\0"+
    "\1\313\5\0\1\304\1\0\1\304\25\0\1\336\35\0"+
    "\3\154\6\0\2\154\1\0\1\154\11\0\1\154\11\0"+
    "\1\314\7\0\3\154\1\316\6\0\2\316\1\0\1\316"+
    "\11\0\1\316\3\0\1\315\1\316\1\314\1\0\1\314"+
    "\4\0\1\u0132\74\0\1\u0133\25\0\1\u0134\54\0\4\316"+
    "\6\0\2\316\1\0\1\316\11\0\1\316\3\0\1\315"+
    "\1\316\4\0\1\314\10\0\1\u0135\1\u0136\32\0\1\314"+
    "\1\0\1\314\1\0\1\314\44\0\1\314\1\0\1\314"+
    "\16\0\1\u0137\6\0\1\u0138\41\0\1\u0139\75\0\1\u013a"+
    "\12\0\1\u013b\2\0\1\154\76\0\1\u013c\44\0\1\u013d"+
    "\36\0\1\u013a\41\0\1\u0116\3\154\6\0\2\154\1\0"+
    "\1\154\11\0\1\154\11\0\1\314\7\0\4\u0116\6\0"+
    "\2\u0116\1\0\1\u0116\11\0\1\u0116\3\0\1\315\1\316"+
    "\1\314\1\0\1\314\1\0\1\314\7\0\3\154\1\u0116"+
    "\6\0\2\u0116\1\0\1\u0116\11\0\1\u0116\3\0\1\315"+
    "\1\316\1\314\1\0\1\314\1\0\1\314\7\0\1\u0116"+
    "\1\316\1\u0116\1\316\6\0\2\316\1\0\1\316\11\0"+
    "\1\316\3\0\1\315\1\316\1\314\1\0\1\314\1\0"+
    "\1\314\7\0\1\u0116\3\316\6\0\2\316\1\0\1\316"+
    "\11\0\1\316\3\0\1\315\1\316\1\314\1\0\1\314"+
    "\11\0\1\u013e\1\u013f\1\u0140\1\u013e\6\0\2\u013e\1\0"+
    "\1\u013e\11\0\1\u013e\11\0\1\314\7\0\1\313\1\316"+
    "\1\u0116\1\316\6\0\2\316\1\0\1\316\11\0\1\316"+
    "\3\0\1\315\1\316\1\314\1\0\1\314\11\0\1\170"+
    "\1\316\1\260\1\316\6\0\2\316\1\0\1\316\11\0"+
    "\1\316\4\0\1\333\4\0\1\304\43\0\1\67\1\304"+
    "\1\0\1\304\7\0\1\u0141\63\0\1\u0142\47\0\1\204"+
    "\42\0\2\154\6\0\2\154\1\0\1\154\11\0\1\154"+
    "\16\0\1\311\27\0\1\u0115\23\0\1\u0116\1\247\1\154"+
    "\1\247\6\0\2\154\1\0\1\154\11\0\1\247\11\0"+
    "\1\314\7\0\2\154\1\247\1\u0116\6\0\2\u0116\1\0"+
    "\1\u0116\11\0\1\u0116\3\0\1\315\1\316\1\314\1\0"+
    "\1\314\6\0\1\u0143\1\320\45\0\1\u0144\66\0\1\347"+
    "\27\0\1\u0145\3\0\1\u0146\37\0\1\220\1\u0145\1\0"+
    "\1\u0145\1\0\1\u0147\4\0\1\u0148\36\0\1\222\1\u0147"+
    "\1\0\1\u0147\1\0\1\u0149\35\0\1\u014a\5\0\1\224"+
    "\1\u0149\1\0\1\u0149\1\0\1\354\1\355\4\0\1\356"+
    "\1\0\1\u014b\1\362\1\u014c\1\362\1\363\1\364\1\365"+
    "\2\0\1\365\2\362\1\0\1\362\1\356\1\0\1\366"+
    "\1\0\2\367\1\370\2\0\1\362\1\366\1\364\3\0"+
    "\1\354\1\0\1\354\3\0\1\u014d\53\0\1\u014e\27\0"+
    "\1\u014f\23\0\1\u0150\3\362\6\0\2\362\1\0\1\362"+
    "\11\0\1\362\11\0\1\u0151\7\0\4\u0150\6\0\2\u0150"+
    "\1\0\1\u0150\11\0\1\u0150\3\0\1\u0152\1\0\1\u0151"+
    "\1\0\1\u0151\1\0\1\u0151\7\0\3\362\1\u0150\6\0"+
    "\2\u0150\1\0\1\u0150\11\0\1\u0150\3\0\1\u0152\1\0"+
    "\1\u0151\1\0\1\u0151\1\0\1\u0151\7\0\4\316\6\0"+
    "\2\316\1\0\1\316\11\0\1\316\3\0\1\u0152\1\0"+
    "\1\u0151\1\0\1\u0151\6\0\1\u0153\1\u0154\75\0\1\u0155"+
    "\23\0\1\u0156\44\0\1\u0157\65\0\1\u0158\33\0\1\u0159"+
    "\56\0\4\373\6\0\2\373\1\0\1\373\11\0\1\373"+
    "\21\0\4\373\6\0\2\373\1\0\1\373\11\0\1\373"+
    "\4\0\1\u015a\14\0\4\316\6\0\2\316\1\0\1\316"+
    "\11\0\1\316\4\0\1\u015a\4\0\1\u0151\7\0\1\u0150"+
    "\1\316\1\u0150\1\316\6\0\2\316\1\0\1\316\11\0"+
    "\1\316\3\0\1\u0152\1\0\1\u0151\1\0\1\u0151\11\0"+
    "\1\373\1\316\1\373\1\316\6\0\2\316\1\0\1\316"+
    "\11\0\1\316\4\0\1\u015a\4\0\1\u0151\7\0\1\u0150"+
    "\3\316\6\0\2\316\1\0\1\316\11\0\1\316\3\0"+
    "\1\u0152\1\0\1\u0151\1\0\1\u0151\11\0\1\373\3\316"+
    "\6\0\2\316\1\0\1\316\11\0\1\316\4\0\1\u015a"+
    "\4\0\1\u0149\1\0\1\u015b\41\0\1\224\1\u0149\1\0"+
    "\1\u0149\1\0\1\u0147\6\0\1\u0105\34\0\1\222\1\u0147"+
    "\1\0\1\u0147\1\0\1\u0147\4\0\1\u015c\36\0\1\222"+
    "\1\u0147\1\0\1\u0147\1\0\1\u0149\1\0\1\u015d\41\0"+
    "\1\224\1\u0149\1\0\1\u0149\1\0\1\u0147\16\0\1\u015e"+
    "\24\0\1\222\1\u0147\1\0\1\u0147\1\0\1\u0147\43\0"+
    "\1\222\1\u0147\1\0\1\u0147\1\0\1\u0106\5\0\1\356"+
    "\1\0\1\u015f\1\0\1\u014c\1\362\1\363\1\364\1\365"+
    "\2\0\1\365\2\362\1\0\1\362\1\356\1\0\1\366"+
    "\1\0\2\367\1\370\2\0\1\362\1\366\1\364\3\0"+
    "\1\u0106\1\0\1\u0106\1\0\1\u0107\5\0\1\u0160\1\0"+
    "\1\u0161\1\0\1\u0162\1\0\1\u0163\1\0\1\365\2\0"+
    "\1\365\2\362\1\0\1\362\1\u0160\3\0\2\367\1\370"+
    "\10\0\1\u0107\1\0\1\u0107\1\0\1\u0149\30\0\1\u0103"+
    "\12\0\1\224\1\u0149\1\0\1\u0149\1\0\1\u0147\32\0"+
    "\1\u0164\10\0\1\222\1\u0147\1\0\1\u0147\1\0\1\u0147"+
    "\1\0\1\u0165\41\0\1\222\1\u0147\1\0\1\u0147\1\0"+
    "\1\u010b\7\0\1\u0166\2\u0167\1\u0116\6\0\2\u0116\1\0"+
    "\1\u0116\11\0\1\u0116\5\0\1\u010b\1\0\1\u010b\6\0"+
    "\1\u0168\43\0\1\u010d\7\0\1\u0166\2\u0167\1\u0116\6\0"+
    "\1\u0169\1\u0116\1\0\1\u0116\11\0\1\u0116\5\0\1\u010d"+
    "\1\0\1\u010d\31\0\1\u016a\20\0\1\u010f\7\0\1\u0166"+
    "\2\u0167\1\u0116\6\0\1\u016b\1\u0116\1\0\1\u0116\11\0"+
    "\1\u0116\5\0\1\u010f\1\0\1\u010f\25\0\1\u0121\35\0"+
    "\3\247\6\0\2\247\1\0\1\247\11\0\1\247\11\0"+
    "\1\u0117\7\0\3\247\1\316\6\0\2\316\1\0\1\316"+
    "\11\0\1\316\3\0\1\u0118\1\0\1\u0117\1\0\1\u0117"+
    "\4\0\1\u016c\74\0\1\u016d\25\0\1\u016e\54\0\4\316"+
    "\6\0\2\316\1\0\1\316\11\0\1\316\3\0\1\u0118"+
    "\5\0\1\u0117\10\0\1\u016f\1\u0170\32\0\1\u0117\1\0"+
    "\1\u0117\1\0\1\u0117\44\0\1\u0117\1\0\1\u0117\16\0"+
    "\1\u0171\6\0\1\u0172\41\0\1\u0173\75\0\1\u0174\12\0"+
    "\1\u0175\2\0\1\247\76\0\1\u0176\44\0\1\u0177\36\0"+
    "\1\u0174\41\0\1\u0178\1\u0179\1\u017a\1\u0178\6\0\2\u0178"+
    "\1\0\1\u0178\11\0\1\u0178\11\0\1\u010f\43\0\1\131"+
    "\1\u010f\1\0\1\u010f\7\0\1\u017b\63\0\1\u017c\47\0"+
    "\1\272\42\0\2\247\6\0\2\247\1\0\1\247\11\0"+
    "\1\247\16\0\1\u0114\55\0\1\247\7\0\2\247\1\0"+
    "\1\247\23\0\1\u0117\7\0\2\247\2\316\6\0\2\316"+
    "\1\0\1\316\11\0\1\316\3\0\1\u0118\1\0\1\u0117"+
    "\1\0\1\u0117\6\0\1\u017d\1\u011a\45\0\1\u017e\66\0"+
    "\1\u012a\37\0\4\313\6\0\2\313\1\0\1\313\11\0"+
    "\1\313\21\0\4\313\6\0\2\313\1\0\1\313\11\0"+
    "\1\313\3\0\1\315\1\316\12\0\1\u017f\52\0\1\313"+
    "\1\316\1\313\1\316\6\0\2\316\1\0\1\316\11\0"+
    "\1\316\3\0\1\315\1\316\35\0\1\204\27\0\1\313"+
    "\3\316\6\0\2\316\1\0\1\316\11\0\1\316\3\0"+
    "\1\315\1\316\4\0\1\314\3\0\1\u0180\3\0\4\316"+
    "\6\0\2\316\1\0\1\316\11\0\1\316\3\0\1\315"+
    "\1\316\1\314\1\0\1\314\1\0\1\314\4\0\1\u0181"+
    "\2\0\4\316\6\0\2\316\1\0\1\316\11\0\1\316"+
    "\3\0\1\315\1\316\1\314\1\0\1\314\1\0\1\314"+
    "\7\0\4\316\6\0\2\316\1\0\1\316\10\0\1\u0182"+
    "\1\316\3\0\1\315\1\316\1\314\1\0\1\314\11\0"+
    "\3\u0183\7\0\1\u0183\1\u0184\13\0\1\u0183\24\0\1\u0183"+
    "\7\0\1\u0183\1\0\1\u0183\23\0\1\314\1\0\1\154"+
    "\5\0\4\316\6\0\2\316\1\0\1\316\11\0\1\316"+
    "\3\0\1\315\1\316\1\314\1\0\1\314\1\0\1\314"+
    "\6\0\1\154\4\316\6\0\2\316\1\0\1\316\11\0"+
    "\1\316\3\0\1\315\1\316\1\314\1\0\1\314\1\0"+
    "\1\314\4\0\1\u0185\2\0\4\316\6\0\2\316\1\0"+
    "\1\316\11\0\1\316\3\0\1\315\1\316\1\314\1\0"+
    "\1\314\1\0\1\314\1\0\1\u0186\5\0\4\316\6\0"+
    "\2\316\1\0\1\316\11\0\1\316\3\0\1\315\1\316"+
    "\1\314\1\0\1\314\1\0\1\314\7\0\4\316\3\0"+
    "\1\u0187\2\0\2\316\1\0\1\316\11\0\1\316\3\0"+
    "\1\315\1\316\1\314\1\0\1\314\1\0\1\314\7\0"+
    "\4\316\6\0\2\316\1\0\1\316\3\0\1\u013a\5\0"+
    "\1\316\3\0\1\315\1\316\1\314\1\0\1\314\1\0"+
    "\1\314\7\0\4\316\6\0\2\316\1\0\1\316\5\0"+
    "\1\u0188\3\0\1\316\3\0\1\315\1\316\1\314\1\0"+
    "\1\314\11\0\4\u0189\6\0\2\u0189\1\0\1\u0189\11\0"+
    "\1\u0189\21\0\3\u018a\1\u0189\6\0\1\u018a\1\u018b\1\0"+
    "\1\u0189\11\0\1\u018a\21\0\3\u0189\1\u018a\6\0\1\u0189"+
    "\1\u018a\1\0\1\u018a\11\0\1\u0189\15\0\1\u018c\47\0"+
    "\1\u018d\62\0\1\u0171\6\0\1\u0138\26\0\1\u018e\46\0"+
    "\1\u0145\7\0\1\u018f\2\u0190\1\u0150\6\0\2\u0150\1\0"+
    "\1\u0150\11\0\1\u0150\5\0\1\u0145\1\0\1\u0145\6\0"+
    "\1\u0191\43\0\1\u0147\7\0\1\u018f\2\u0190\1\u0150\6\0"+
    "\1\u0192\1\u0150\1\0\1\u0150\11\0\1\u0150\5\0\1\u0147"+
    "\1\0\1\u0147\31\0\1\u0193\20\0\1\u0149\7\0\1\u018f"+
    "\2\u0190\1\u0150\6\0\1\u0194\1\u0150\1\0\1\u0150\11\0"+
    "\1\u0150\5\0\1\u0149\1\0\1\u0149\25\0\1\u015b\35\0"+
    "\3\362\6\0\2\362\1\0\1\362\11\0\1\362\11\0"+
    "\1\u0151\7\0\3\362\1\316\6\0\2\316\1\0\1\316"+
    "\11\0\1\316\3\0\1\u0152\1\0\1\u0151\1\0\1\u0151"+
    "\4\0\1\u0195\74\0\1\u0196\25\0\1\u0197\54\0\4\316"+
    "\6\0\2\316\1\0\1\316\11\0\1\316\3\0\1\u0152"+
    "\5\0\1\u0151\10\0\1\u0198\1\u0199\32\0\1\u0151\1\0"+
    "\1\u0151\1\0\1\u0151\44\0\1\u0151\1\0\1\u0151\16\0"+
    "\1\u019a\6\0\1\u019b\41\0\1\u019c\75\0\1\u019d\12\0"+
    "\1\u019e\2\0\1\362\76\0\1\u019f\44\0\1\u01a0\36\0"+
    "\1\u019d\41\0\1\u01a1\1\u01a2\1\u01a3\1\u01a1\6\0\2\u01a1"+
    "\1\0\1\u01a1\11\0\1\u01a1\11\0\1\u0149\43\0\1\224"+
    "\1\u0149\1\0\1\u0149\7\0\1\u01a4\63\0\1\u01a5\47\0"+
    "\1\u0105\42\0\2\362\6\0\2\362\1\0\1\362\11\0"+
    "\1\362\16\0\1\u014e\55\0\1\362\7\0\2\362\1\0"+
    "\1\362\23\0\1\u0151\7\0\2\362\2\316\6\0\2\316"+
    "\1\0\1\316\11\0\1\316\3\0\1\u0152\1\0\1\u0151"+
    "\1\0\1\u0151\6\0\1\u01a6\1\u0154\45\0\1\u01a7\66\0"+
    "\1\u0164\37\0\4\u0116\6\0\2\u0116\1\0\1\u0116\11\0"+
    "\1\u0116\21\0\4\u0116\6\0\2\u0116\1\0\1\u0116\11\0"+
    "\1\u0116\3\0\1\u0118\13\0\1\u01a8\52\0\1\u0116\1\316"+
    "\1\u0116\1\316\6\0\2\316\1\0\1\316\11\0\1\316"+
    "\3\0\1\u0118\36\0\1\272\27\0\1\u0116\3\316\6\0"+
    "\2\316\1\0\1\316\11\0\1\316\3\0\1\u0118\5\0"+
    "\1\u0117\3\0\1\u01a9\3\0\4\316\6\0\2\316\1\0"+
    "\1\316\11\0\1\316\3\0\1\u0118\1\0\1\u0117\1\0"+
    "\1\u0117\1\0\1\u0117\4\0\1\u01aa\2\0\4\316\6\0"+
    "\2\316\1\0\1\316\11\0\1\316\3\0\1\u0118\1\0"+
    "\1\u0117\1\0\1\u0117\1\0\1\u0117\7\0\4\316\6\0"+
    "\2\316\1\0\1\316\10\0\1\u01ab\1\316\3\0\1\u0118"+
    "\1\0\1\u0117\1\0\1\u0117\11\0\3\u01ac\7\0\1\u01ac"+
    "\1\u01ad\13\0\1\u01ac\24\0\1\u01ac\7\0\1\u01ac\1\0"+
    "\1\u01ac\23\0\1\u0117\1\0\1\247\5\0\4\316\6\0"+
    "\2\316\1\0\1\316\11\0\1\316\3\0\1\u0118\1\0"+
    "\1\u0117\1\0\1\u0117\1\0\1\u0117\6\0\1\247\4\316"+
    "\6\0\2\316\1\0\1\316\11\0\1\316\3\0\1\u0118"+
    "\1\0\1\u0117\1\0\1\u0117\1\0\1\u0117\4\0\1\u01ae"+
    "\2\0\4\316\6\0\2\316\1\0\1\316\11\0\1\316"+
    "\3\0\1\u0118\1\0\1\u0117\1\0\1\u0117\1\0\1\u0117"+
    "\1\0\1\u01af\5\0\4\316\6\0\2\316\1\0\1\316"+
    "\11\0\1\316\3\0\1\u0118\1\0\1\u0117\1\0\1\u0117"+
    "\1\0\1\u0117\7\0\4\316\3\0\1\u01b0\2\0\2\316"+
    "\1\0\1\316\11\0\1\316\3\0\1\u0118\1\0\1\u0117"+
    "\1\0\1\u0117\1\0\1\u0117\7\0\4\316\6\0\2\316"+
    "\1\0\1\316\3\0\1\u0174\5\0\1\316\3\0\1\u0118"+
    "\1\0\1\u0117\1\0\1\u0117\1\0\1\u0117\7\0\4\316"+
    "\6\0\2\316\1\0\1\316\5\0\1\u01b1\3\0\1\316"+
    "\3\0\1\u0118\1\0\1\u0117\1\0\1\u0117\11\0\4\u01b2"+
    "\6\0\2\u01b2\1\0\1\u01b2\11\0\1\u01b2\21\0\3\u01b3"+
    "\1\u01b2\6\0\1\u01b3\1\u01b4\1\0\1\u01b2\11\0\1\u01b3"+
    "\21\0\3\u01b2\1\u01b3\6\0\1\u01b2\1\u01b3\1\0\1\u01b3"+
    "\11\0\1\u01b2\15\0\1\u01b5\47\0\1\u01b6\71\0\1\u0172"+
    "\26\0\1\u01b7\52\0\1\u01b8\51\0\1\u0185\73\0\1\u01b9"+
    "\44\0\1\154\34\0\4\u013e\6\0\2\u013e\1\0\1\u013e"+
    "\11\0\1\u013e\21\0\1\u01ba\46\0\1\u01bb\63\0\1\u0188"+
    "\47\0\1\154\33\0\1\u01bc\55\0\4\316\6\0\2\316"+
    "\1\0\1\316\11\0\1\316\4\0\1\316\14\0\4\u01bd"+
    "\6\0\2\u01bd\1\0\1\u01bd\11\0\1\u01bd\4\0\1\316"+
    "\14\0\1\u01be\3\316\6\0\2\316\1\0\1\316\11\0"+
    "\1\316\4\0\1\316\13\0\1\204\43\0\1\u01bf\52\0"+
    "\1\204\54\0\4\u0150\6\0\2\u0150\1\0\1\u0150\11\0"+
    "\1\u0150\21\0\4\u0150\6\0\2\u0150\1\0\1\u0150\11\0"+
    "\1\u0150\3\0\1\u0152\13\0\1\u01c0\52\0\1\u0150\1\316"+
    "\1\u0150\1\316\6\0\2\316\1\0\1\316\11\0\1\316"+
    "\3\0\1\u0152\36\0\1\u0105\27\0\1\u0150\3\316\6\0"+
    "\2\316\1\0\1\316\11\0\1\316\3\0\1\u0152\5\0"+
    "\1\u0151\3\0\1\u01c1\3\0\4\316\6\0\2\316\1\0"+
    "\1\316\11\0\1\316\3\0\1\u0152\1\0\1\u0151\1\0"+
    "\1\u0151\1\0\1\u0151\4\0\1\u01c2\2\0\4\316\6\0"+
    "\2\316\1\0\1\316\11\0\1\316\3\0\1\u0152\1\0"+
    "\1\u0151\1\0\1\u0151\1\0\1\u0151\7\0\4\316\6\0"+
    "\2\316\1\0\1\316\10\0\1\u01c3\1\316\3\0\1\u0152"+
    "\1\0\1\u0151\1\0\1\u0151\11\0\3\u01c4\7\0\1\u01c4"+
    "\1\u01c5\13\0\1\u01c4\24\0\1\u01c4\7\0\1\u01c4\1\0"+
    "\1\u01c4\23\0\1\u0151\1\0\1\362\5\0\4\316\6\0"+
    "\2\316\1\0\1\316\11\0\1\316\3\0\1\u0152\1\0"+
    "\1\u0151\1\0\1\u0151\1\0\1\u0151\6\0\1\362\4\316"+
    "\6\0\2\316\1\0\1\316\11\0\1\316\3\0\1\u0152"+
    "\1\0\1\u0151\1\0\1\u0151\1\0\1\u0151\4\0\1\u01c6"+
    "\2\0\4\316\6\0\2\316\1\0\1\316\11\0\1\316"+
    "\3\0\1\u0152\1\0\1\u0151\1\0\1\u0151\1\0\1\u0151"+
    "\1\0\1\u01c7\5\0\4\316\6\0\2\316\1\0\1\316"+
    "\11\0\1\316\3\0\1\u0152\1\0\1\u0151\1\0\1\u0151"+
    "\1\0\1\u0151\7\0\4\316\3\0\1\u01c8\2\0\2\316"+
    "\1\0\1\316\11\0\1\316\3\0\1\u0152\1\0\1\u0151"+
    "\1\0\1\u0151\1\0\1\u0151\7\0\4\316\6\0\2\316"+
    "\1\0\1\316\3\0\1\u019d\5\0\1\316\3\0\1\u0152"+
    "\1\0\1\u0151\1\0\1\u0151\1\0\1\u0151\7\0\4\316"+
    "\6\0\2\316\1\0\1\316\5\0\1\u01c9\3\0\1\316"+
    "\3\0\1\u0152\1\0\1\u0151\1\0\1\u0151\11\0\4\u01ca"+
    "\6\0\2\u01ca\1\0\1\u01ca\11\0\1\u01ca\21\0\3\u01cb"+
    "\1\u01ca\6\0\1\u01cb\1\u01cc\1\0\1\u01ca\11\0\1\u01cb"+
    "\21\0\3\u01ca\1\u01cb\6\0\1\u01ca\1\u01cb\1\0\1\u01cb"+
    "\11\0\1\u01ca\15\0\1\u01cd\47\0\1\u01ce\71\0\1\u019b"+
    "\26\0\1\u01cf\52\0\1\u01d0\51\0\1\u01ae\73\0\1\u01d1"+
    "\44\0\1\247\34\0\4\u0178\6\0\2\u0178\1\0\1\u0178"+
    "\11\0\1\u0178\21\0\1\u01d2\46\0\1\u01d3\63\0\1\u01b1"+
    "\47\0\1\247\33\0\1\u01d4\55\0\4\316\6\0\2\316"+
    "\1\0\1\316\11\0\1\316\21\0\4\u01d5\6\0\2\u01d5"+
    "\1\0\1\u01d5\11\0\1\u01d5\21\0\1\u01d6\3\316\6\0"+
    "\2\316\1\0\1\316\11\0\1\316\20\0\1\272\43\0"+
    "\1\u01d7\52\0\1\272\53\0\1\u01d8\72\0\1\154\27\0"+
    "\1\u0189\44\0\1\u01d9\46\0\1\u01da\52\0\1\336\50\0"+
    "\1\u01db\51\0\1\u01c6\73\0\1\u01dc\44\0\1\362\34\0"+
    "\4\u01a1\6\0\2\u01a1\1\0\1\u01a1\11\0\1\u01a1\21\0"+
    "\1\u01dd\46\0\1\u01de\63\0\1\u01c9\47\0\1\362\33\0"+
    "\1\u01df\55\0\4\u01e0\6\0\2\u01e0\1\0\1\u01e0\11\0"+
    "\1\u01e0\21\0\1\u01e1\3\316\6\0\2\316\1\0\1\316"+
    "\11\0\1\316\20\0\1\u0105\43\0\1\u01e2\52\0\1\u0105"+
    "\53\0\1\u01e3\72\0\1\247\27\0\1\u01b2\44\0\1\u01e4"+
    "\46\0\1\u01e5\52\0\1\u0121\44\0\1\300\43\0\1\60"+
    "\1\300\1\0\1\300\10\0\1\154\45\0\1\154\53\0"+
    "\1\u01e6\72\0\1\362\27\0\1\u01ca\44\0\1\u01e7\46\0"+
    "\1\u01e8\52\0\1\u015b\44\0\1\u010b\43\0\1\125\1\u010b"+
    "\1\0\1\u010b\10\0\1\247\45\0\1\247\44\0\1\u0145"+
    "\43\0\1\220\1\u0145\1\0\1\u0145\10\0\1\362\45\0"+
    "\1\362\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\20\1\1\11\127\0\3\1\12\0\3\1\2\0"+
    "\3\1\46\0\3\1\7\0\6\1\22\0\1\1\3\0"+
    "\1\1\2\0\1\11\10\0\7\1\7\0\1\1\12\0"+
    "\3\1\7\0\6\1\22\0\1\1\3\0\1\1\21\0"+
    "\1\1\4\0\1\1\1\0\1\1\1\0\4\1\2\0"+
    "\7\1\16\0\1\1\3\0\1\1\21\0\1\1\4\0"+
    "\1\1\1\0\1\1\1\0\4\1\2\0\7\1\21\0"+
    "\3\1\4\0\1\1\1\0\1\1\1\0\4\1\2\0"+
    "\7\1\21\0\3\1\10\0\2\1\13\0\3\1\10\0"+
    "\2\1\11\0\2\1\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  void echo() {
    int len = yylength();       // Find length of current lexeme
    for (int i=0; i<len; i++) { // Run through each character in turn
      char c = yycharat(i);
      switch (c) {              // and translate as appropriate ...
        case '<' : System.out.print("&lt;");  break;
        case '>' : System.out.print("&gt;");  break;
        case '&' : System.out.print("&amp;"); break;
        default  : System.out.print(c);       break;
      }
    }
  }
  void tag(String cl) {
    System.out.print("<span class=\"" + cl + "\">");
    echo();
    System.out.print("</span>");
  }
  void date() { tag("date"); }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  HighlightDates(java.io.Reader in) {
    System.out.println("<html>");
  System.out.println("<head>");
  System.out.println("<title>My Syntax Colored Web Page</title>");
  System.out.println("<style type=\"text/css\">");
  System.out.println("  body     {white-space:pre;");
  System.out.println("            background-color:#ffffcc;");
  System.out.println("            color:black;");
  System.out.println("            font-family:\"Lucida Console\",\"Courier New\",Monotype}");
  System.out.println("  .date {background-color:white; color:green}");
  System.out.println("</style>");
  System.out.println("</head>");
  System.out.println("<body>");
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  HighlightDates(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      System.out.println("</body>");
  System.out.println("</html>");

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { echo();
          }
        case 4: break;
        case 2: 
          { date();
          }
        case 5: break;
        case 1: 
          { System.out.print(yytext());
          }
        case 6: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java HighlightDates <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        HighlightDates scanner = null;
        try {
          scanner = new HighlightDates( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
