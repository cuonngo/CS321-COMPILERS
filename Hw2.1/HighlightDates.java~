/* The following code was generated by JFlex 1.4.3 on 2/2/16 12:50 PM */

// CS321-hw2 Cuong Ngo
// Highlight Dates from text

/** This is an example of dates highlighting program for any
 *  text file language that has been written using the jflex **/

class HighlightDates {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\1\2\0\1\1\22\0\1\47\1\0\1\46\11\0\1\44"+
    "\2\0\1\45\1\11\1\13\1\12\1\23\1\40\1\24\1\14\1\26"+
    "\1\26\1\14\7\0\1\27\2\0\1\35\1\0\1\2\3\0\1\15"+
    "\2\0\1\17\1\42\1\33\3\0\1\41\15\0\1\7\1\4\1\20"+
    "\1\35\1\3\1\2\1\30\1\21\1\37\1\15\1\0\1\25\1\22"+
    "\1\16\1\34\1\36\1\0\1\5\1\31\1\32\1\6\1\43\2\0"+
    "\1\10\uff86\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\20\1\117\0\3\2\12\0\3\2\4\0\3\2"+
    "\22\0\3\1\7\0\6\1\22\0\1\2\3\0\3\1"+
    "\7\0\6\1\3\0\1\2\12\0\11\1\7\0\1\1"+
    "\12\0\1\1\3\0\1\1\21\0\1\1\4\0\1\2"+
    "\1\0\1\2\1\0\1\2\3\0\1\1\11\0\1\1"+
    "\3\2\2\0\7\2\10\0\1\1\1\0\1\1\1\0"+
    "\4\1\2\0\7\1\10\0\3\1\2\0\7\1\14\0"+
    "\3\2\15\0\2\1\15\0\3\1\4\0\2\1\14\0"+
    "\2\1\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398"+
    "\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8"+
    "\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618"+
    "\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758"+
    "\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898"+
    "\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8"+
    "\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18"+
    "\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0c30\0\u0c58"+
    "\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\u0d98"+
    "\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8"+
    "\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018"+
    "\0\u1040\0\u1068\0\u1090\0\u10b8\0\u10e0\0\u1108\0\u1130\0\u1158"+
    "\0\u1180\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298"+
    "\0\u12c0\0\u12e8\0\u1310\0\u1338\0\u1360\0\u1388\0\u13b0\0\u13d8"+
    "\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518"+
    "\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630\0\u1658"+
    "\0\u1680\0\u16a8\0\u16d0\0\u16f8\0\u1720\0\u1748\0\u1770\0\u1798"+
    "\0\u17c0\0\u17e8\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0\0\u18d8"+
    "\0\u1900\0\u1928\0\u1950\0\u1978\0\u19a0\0\u19c8\0\u19f0\0\u1a18"+
    "\0\u1a40\0\u1a68\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30\0\u1b58"+
    "\0\u1b80\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20\0\u1c48\0\u1c70\0\u1c98"+
    "\0\u1cc0\0\u1ce8\0\u1d10\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8"+
    "\0\u1e00\0\u1e28\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18"+
    "\0\u1f40\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0\0\u2008\0\u2030\0\u2058"+
    "\0\u2080\0\u20a8\0\u20d0\0\u20f8\0\u2120\0\u2148\0\u2170\0\u2198"+
    "\0\u21c0\0\u21e8\0\u2210\0\u2238\0\u2260\0\u2288\0\u22b0\0\u22d8"+
    "\0\u2300\0\u2328\0\u2350\0\u2378\0\u23a0\0\u23c8\0\u23f0\0\u2418"+
    "\0\u2440\0\u2468\0\u2490\0\u24b8\0\u24e0\0\u2508\0\u2530\0\u2558"+
    "\0\u2580\0\u25a8\0\u25d0\0\u25f8\0\u2620\0\u2648\0\u2670\0\u2698"+
    "\0\u26c0\0\u26e8\0\u2710\0\u2738\0\u2760\0\u2788\0\u27b0\0\u27d8"+
    "\0\u2800\0\u2828\0\u2850\0\u2878\0\u28a0\0\u28c8\0\u28f0\0\u2918"+
    "\0\u2940\0\u2968\0\u2990\0\u29b8\0\u29e0\0\u2a08\0\u2a30\0\u2a58"+
    "\0\u2a80\0\u2aa8\0\u2ad0\0\u2af8\0\u2b20\0\u2b48\0\u2b70\0\u2b98"+
    "\0\u2bc0\0\u2be8\0\u2c10\0\u2c38\0\u2c60\0\u2c88\0\u2cb0\0\u2cd8"+
    "\0\u2d00\0\u2d28\0\u2d50\0\u2d78\0\u2da0\0\u2dc8\0\u2df0\0\u2e18"+
    "\0\u2e40\0\u2e68\0\u2e90\0\u2eb8\0\u2ee0\0\u2f08\0\u2f30\0\u2f58"+
    "\0\u2f80\0\u2fa8\0\u2fd0\0\u2ff8\0\u3020\0\u3048\0\u3070\0\u3098"+
    "\0\u30c0\0\u30e8\0\u3110\0\u3138\0\u3160\0\u3188\0\u31b0\0\u31d8"+
    "\0\u3200\0\u3228\0\u3250\0\u3278\0\u32a0\0\u32c8\0\u32f0\0\u3318"+
    "\0\u3340\0\u3368\0\u3390\0\u33b8\0\u33e0\0\u3408\0\u3430\0\u3458"+
    "\0\u3480\0\u34a8\0\u34d0\0\u34f8\0\u3520\0\u3548\0\u3570\0\u3598"+
    "\0\u35c0\0\u35e8\0\u3610\0\u3638\0\u3660\0\u3688\0\u36b0\0\u36d8"+
    "\0\u3700\0\u3728\0\u3750\0\u3778\0\u37a0\0\u37c8\0\u37f0\0\u3818"+
    "\0\u3840\0\u3868\0\u3890\0\u37c8\0\u37f0\0\u38b8\0\u38e0\0\u3908"+
    "\0\u3930\0\u3958\0\u3980\0\u39a8\0\u39d0\0\u39f8\0\u3a20\0\u3a48"+
    "\0\u3a70\0\u3a98\0\u3638\0\u3ac0\0\u3ae8\0\u3b10\0\u3b38\0\u3b60"+
    "\0\u3b88\0\u2d50\0\u3b38\0\u3bb0\0\u3bd8\0\u3c00\0\u3c28\0\u3c50"+
    "\0\u3c78\0\u3ca0\0\u3cc8\0\u3cf0\0\u3d18\0\u3d40\0\u3d68\0\u3458"+
    "\0\u3d18\0\u3d90\0\u3db8\0\u3de0\0\u3e08\0\u3e30\0\u3e58\0\u3e80";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\4\2\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\2\1\13\1\14\1\15"+
    "\1\2\1\15\1\4\1\2\1\16\1\2\2\17\1\20"+
    "\2\2\1\10\1\16\1\12\3\2\2\21\2\0\1\22"+
    "\4\0\1\23\1\0\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\2\0\1\32\1\33\1\34\1\0\1\34"+
    "\1\23\1\0\1\35\1\0\2\36\1\37\2\0\1\27"+
    "\1\35\1\31\7\0\1\22\1\40\3\0\1\23\1\0"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\2\0"+
    "\1\32\1\33\1\34\1\0\1\34\1\23\1\0\1\35"+
    "\1\0\2\36\1\37\2\0\1\27\1\35\1\31\7\0"+
    "\1\22\3\0\1\41\1\23\1\0\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\2\0\1\32\1\33\1\34"+
    "\1\0\1\34\1\23\1\0\1\35\1\0\2\36\1\37"+
    "\1\42\1\0\1\27\1\35\1\31\7\0\1\22\4\0"+
    "\1\23\1\0\1\43\1\44\1\45\1\46\1\30\1\31"+
    "\1\32\2\0\1\32\1\47\1\50\1\0\1\50\1\23"+
    "\1\0\1\35\1\0\2\36\1\37\2\0\1\46\1\35"+
    "\1\31\6\0\1\51\1\22\4\0\1\23\1\0\1\43"+
    "\1\52\1\53\1\54\1\30\1\31\1\32\2\0\1\32"+
    "\1\55\1\56\1\0\1\56\1\23\1\0\1\35\1\0"+
    "\2\36\1\37\2\0\1\54\1\35\1\31\2\0\1\57"+
    "\1\0\1\51\1\0\1\60\1\22\4\0\1\23\1\0"+
    "\1\61\1\62\1\63\1\54\1\30\1\31\1\32\2\0"+
    "\1\32\1\55\1\56\1\0\1\56\1\23\1\0\1\35"+
    "\1\0\2\36\1\37\2\0\1\54\1\35\1\31\2\0"+
    "\1\64\1\0\1\60\1\0\1\65\1\22\4\0\1\23"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\0\1\32\1\33\1\34\1\0\1\34\1\23\1\0"+
    "\1\35\1\0\2\36\1\37\2\0\1\27\1\35\1\31"+
    "\2\0\1\66\1\0\1\65\2\0\1\22\3\0\1\67"+
    "\1\70\1\0\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\2\0\1\32\1\33\1\34\1\0\1\34\1\23"+
    "\1\0\1\35\1\0\2\36\1\37\2\0\1\27\1\35"+
    "\1\31\7\0\1\22\4\0\1\23\1\0\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\2\0\1\32\1\33"+
    "\1\34\1\0\1\34\1\23\1\0\1\35\1\0\1\36"+
    "\1\71\1\37\2\0\1\27\1\35\1\31\7\0\1\22"+
    "\4\0\1\72\1\0\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\2\0\1\32\1\33\1\34\1\0\1\34"+
    "\1\23\1\0\1\35\1\0\2\36\1\37\2\0\1\27"+
    "\1\35\1\31\6\0\1\60\1\22\4\0\1\23\1\0"+
    "\1\73\1\25\1\74\1\27\1\30\1\31\1\32\2\0"+
    "\1\32\1\33\1\34\1\0\1\34\1\23\1\0\1\35"+
    "\1\0\2\36\1\37\2\0\1\27\1\35\1\31\2\0"+
    "\1\64\1\0\1\60\1\0\1\60\1\22\4\0\1\23"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\0\1\32\1\33\1\34\1\0\1\34\1\23\1\0"+
    "\1\35\1\0\2\36\1\37\2\0\1\27\1\35\1\31"+
    "\2\0\1\64\1\0\1\60\2\0\1\22\1\75\3\0"+
    "\1\23\1\0\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\2\0\1\32\1\33\1\34\1\0\1\34\1\23"+
    "\1\0\1\35\1\0\2\36\1\37\2\0\1\27\1\35"+
    "\1\31\7\0\1\22\4\0\1\23\1\0\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\76\1\0\1\32"+
    "\1\33\1\34\1\0\1\34\1\23\1\0\1\35\1\0"+
    "\2\36\1\37\2\0\1\27\1\35\1\31\7\0\1\22"+
    "\1\77\3\0\1\23\1\0\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\2\0\1\32\1\33\1\34\1\0"+
    "\1\34\1\23\1\0\1\35\1\0\2\36\1\37\2\0"+
    "\1\27\1\35\1\31\60\0\1\100\52\0\1\101\27\0"+
    "\1\102\22\0\1\103\1\104\1\34\1\27\6\0\2\34"+
    "\1\0\1\34\11\0\1\27\10\0\1\105\7\0\4\103"+
    "\6\0\2\103\1\0\1\103\11\0\1\103\4\0\1\106"+
    "\1\0\1\105\1\0\1\107\7\0\2\34\1\27\1\103"+
    "\6\0\2\103\1\0\1\103\11\0\1\103\4\0\1\110"+
    "\1\0\1\107\1\0\1\111\43\0\1\112\1\0\1\111"+
    "\6\0\1\113\1\114\74\0\1\115\22\0\1\116\41\0"+
    "\1\107\7\0\1\117\1\0\1\120\31\0\1\110\1\0"+
    "\1\107\1\0\1\107\43\0\1\110\1\0\1\107\3\0"+
    "\1\121\64\0\1\122\32\0\1\123\50\0\1\124\73\0"+
    "\1\125\24\0\1\126\43\0\1\127\7\0\1\103\1\104"+
    "\1\34\1\27\6\0\2\34\1\0\1\34\11\0\1\27"+
    "\6\0\1\127\1\0\1\130\7\0\4\103\6\0\2\103"+
    "\1\0\1\103\11\0\1\103\4\0\1\131\1\0\1\130"+
    "\1\0\1\132\7\0\2\34\1\27\1\103\6\0\2\103"+
    "\1\0\1\103\11\0\1\103\4\0\1\133\1\0\1\132"+
    "\1\0\1\134\43\0\1\135\1\0\1\134\1\0\1\132"+
    "\7\0\1\117\1\0\1\120\31\0\1\133\1\0\1\132"+
    "\1\0\1\132\43\0\1\133\1\0\1\132\1\0\1\51"+
    "\1\136\4\0\1\137\1\0\1\140\1\141\1\142\1\143"+
    "\1\144\1\145\1\146\2\0\1\146\2\143\1\0\1\143"+
    "\1\137\1\0\1\147\1\0\2\150\1\151\2\0\1\143"+
    "\1\147\1\145\4\0\1\51\1\0\1\152\7\0\4\103"+
    "\6\0\2\103\1\0\1\103\11\0\1\103\4\0\1\106"+
    "\1\0\1\152\1\0\1\153\7\0\2\34\1\27\1\103"+
    "\6\0\2\103\1\0\1\103\11\0\1\103\4\0\1\110"+
    "\1\0\1\153\1\0\1\154\43\0\1\112\1\0\1\154"+
    "\1\0\1\153\7\0\1\117\1\0\1\120\31\0\1\110"+
    "\1\0\1\153\1\0\1\153\43\0\1\110\1\0\1\153"+
    "\11\0\1\155\2\156\1\157\6\0\2\157\1\0\1\157"+
    "\11\0\1\157\10\0\1\60\1\136\4\0\1\137\1\0"+
    "\1\140\1\141\1\142\1\143\1\144\1\145\1\146\2\0"+
    "\1\146\1\160\1\143\1\0\1\143\1\137\1\0\1\147"+
    "\1\0\2\150\1\151\2\0\1\143\1\147\1\145\4\0"+
    "\1\60\1\0\1\60\7\0\1\103\1\104\1\34\1\27"+
    "\6\0\2\34\1\0\1\34\11\0\1\27\4\0\1\64"+
    "\1\0\1\60\1\0\1\161\7\0\4\103\6\0\2\103"+
    "\1\0\1\103\11\0\1\103\4\0\1\162\1\0\1\161"+
    "\1\0\1\163\7\0\2\34\1\27\1\103\6\0\2\103"+
    "\1\0\1\103\11\0\1\103\4\0\1\164\1\0\1\163"+
    "\11\0\1\155\2\156\1\157\6\0\1\165\1\157\1\0"+
    "\1\157\11\0\1\157\10\0\1\65\1\136\4\0\1\137"+
    "\1\0\1\140\1\141\1\142\1\143\1\144\1\145\1\146"+
    "\2\0\1\146\1\166\1\143\1\0\1\143\1\137\1\0"+
    "\1\147\1\0\2\150\1\151\2\0\1\143\1\147\1\145"+
    "\4\0\1\65\11\0\1\155\2\156\1\157\6\0\1\167"+
    "\1\157\1\0\1\157\11\0\1\157\25\0\1\170\6\0"+
    "\1\171\30\0\1\101\7\0\1\172\17\0\1\102\31\0"+
    "\1\122\22\0\1\173\11\0\1\174\1\101\1\0\1\175"+
    "\25\0\1\102\12\0\1\176\7\0\1\103\1\104\1\34"+
    "\1\27\6\0\2\34\1\0\1\34\11\0\1\27\6\0"+
    "\1\176\1\0\1\177\7\0\2\34\1\27\1\103\6\0"+
    "\2\103\1\0\1\103\11\0\1\103\4\0\1\110\1\0"+
    "\1\177\36\0\1\200\43\0\1\201\35\0\1\202\33\0"+
    "\1\203\73\0\1\204\24\0\1\205\43\0\1\206\45\0"+
    "\1\206\1\0\1\105\43\0\1\106\1\0\1\105\1\0"+
    "\1\105\1\207\4\0\1\210\1\0\1\211\1\212\1\213"+
    "\1\214\1\215\1\216\1\217\2\0\1\217\2\214\1\0"+
    "\1\214\1\210\1\0\1\220\1\0\2\221\1\222\2\0"+
    "\1\214\1\220\1\216\4\0\1\105\11\0\1\223\2\224"+
    "\1\225\6\0\2\225\1\0\1\225\11\0\1\225\10\0"+
    "\1\107\1\207\4\0\1\210\1\0\1\211\1\212\1\213"+
    "\1\214\1\215\1\216\1\217\2\0\1\217\1\226\1\214"+
    "\1\0\1\214\1\210\1\0\1\220\1\0\2\221\1\222"+
    "\2\0\1\214\1\220\1\216\4\0\1\107\11\0\1\223"+
    "\2\224\1\225\6\0\1\227\1\225\1\0\1\225\11\0"+
    "\1\225\10\0\1\111\1\207\4\0\1\210\1\0\1\211"+
    "\1\212\1\213\1\214\1\215\1\216\1\217\2\0\1\217"+
    "\1\230\1\214\1\0\1\214\1\210\1\0\1\220\1\0"+
    "\2\221\1\222\2\0\1\214\1\220\1\216\4\0\1\111"+
    "\11\0\1\223\2\224\1\225\6\0\1\231\1\225\1\0"+
    "\1\225\11\0\1\225\25\0\1\232\6\0\1\233\40\0"+
    "\1\234\74\0\1\235\11\0\1\236\2\0\1\237\40\0"+
    "\1\240\45\0\1\240\1\0\1\241\45\0\1\241\36\0"+
    "\1\242\43\0\1\243\35\0\1\244\30\0\1\245\3\0"+
    "\1\246\37\0\1\57\1\0\1\245\1\0\1\247\4\0"+
    "\1\250\36\0\1\64\1\0\1\247\1\0\1\251\35\0"+
    "\1\252\5\0\1\66\1\0\1\251\1\0\1\127\1\136"+
    "\4\0\1\137\1\0\1\253\1\143\1\254\1\143\1\144"+
    "\1\145\1\146\2\0\1\146\2\143\1\0\1\143\1\137"+
    "\1\0\1\147\1\0\2\150\1\151\2\0\1\143\1\147"+
    "\1\145\4\0\1\127\1\0\1\130\1\255\4\0\1\256"+
    "\1\0\1\257\1\260\1\261\1\262\1\263\1\264\1\265"+
    "\2\0\1\265\2\262\1\0\1\262\1\256\1\0\1\266"+
    "\1\0\2\267\1\270\2\0\1\262\1\266\1\264\4\0"+
    "\1\130\11\0\1\271\2\272\1\273\6\0\2\273\1\0"+
    "\1\273\11\0\1\273\10\0\1\132\1\255\4\0\1\256"+
    "\1\0\1\257\1\260\1\261\1\262\1\263\1\264\1\265"+
    "\2\0\1\265\1\274\1\262\1\0\1\262\1\256\1\0"+
    "\1\266\1\0\2\267\1\270\2\0\1\262\1\266\1\264"+
    "\4\0\1\132\11\0\1\271\2\272\1\273\6\0\1\275"+
    "\1\273\1\0\1\273\11\0\1\273\10\0\1\134\1\255"+
    "\4\0\1\256\1\0\1\257\1\260\1\261\1\262\1\263"+
    "\1\264\1\265\2\0\1\265\1\276\1\262\1\0\1\262"+
    "\1\256\1\0\1\266\1\0\2\267\1\270\2\0\1\262"+
    "\1\266\1\264\4\0\1\134\11\0\1\271\2\272\1\273"+
    "\6\0\1\277\1\273\1\0\1\273\11\0\1\273\12\0"+
    "\1\300\52\0\1\301\27\0\1\302\22\0\1\303\3\143"+
    "\6\0\2\143\1\0\1\143\11\0\1\143\10\0\1\304"+
    "\7\0\4\303\6\0\2\303\1\0\1\303\11\0\1\303"+
    "\3\0\1\305\1\21\1\0\1\304\1\0\1\304\7\0"+
    "\3\143\1\303\6\0\2\303\1\0\1\303\11\0\1\303"+
    "\3\0\1\305\1\21\1\0\1\304\1\0\1\304\7\0"+
    "\4\21\6\0\2\21\1\0\1\21\11\0\1\21\3\0"+
    "\1\305\1\21\1\0\1\304\6\0\1\306\1\307\74\0"+
    "\1\310\22\0\1\311\43\0\1\312\64\0\1\313\32\0"+
    "\1\314\45\0\1\152\1\255\4\0\1\256\1\0\1\315"+
    "\1\316\1\317\1\262\1\263\1\264\1\265\2\0\1\265"+
    "\2\262\1\0\1\262\1\256\1\0\1\266\1\0\2\267"+
    "\1\270\2\0\1\262\1\266\1\264\4\0\1\152\1\0"+
    "\1\153\1\255\4\0\1\256\1\0\1\315\1\316\1\317"+
    "\1\262\1\263\1\264\1\265\2\0\1\265\1\320\1\262"+
    "\1\0\1\262\1\256\1\0\1\266\1\0\2\267\1\270"+
    "\2\0\1\262\1\266\1\264\4\0\1\153\1\0\1\154"+
    "\1\255\4\0\1\256\1\0\1\315\1\316\1\317\1\262"+
    "\1\263\1\264\1\265\2\0\1\265\1\321\1\262\1\0"+
    "\1\262\1\256\1\0\1\266\1\0\2\267\1\270\2\0"+
    "\1\262\1\266\1\264\4\0\1\154\11\0\4\157\6\0"+
    "\2\157\1\0\1\157\11\0\1\157\20\0\4\157\6\0"+
    "\2\157\1\0\1\157\11\0\1\157\4\0\1\322\13\0"+
    "\4\21\6\0\2\21\1\0\1\21\11\0\1\21\4\0"+
    "\1\322\3\0\1\304\7\0\1\303\1\21\1\303\1\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\3\0\1\305"+
    "\1\21\1\0\1\304\1\0\1\161\1\255\4\0\1\256"+
    "\1\0\1\257\1\260\1\261\1\262\1\263\1\264\1\265"+
    "\2\0\1\265\1\323\1\262\1\0\1\262\1\256\1\0"+
    "\1\266\1\0\2\267\1\270\2\0\1\262\1\266\1\264"+
    "\4\0\1\161\11\0\1\271\2\272\1\273\6\0\1\324"+
    "\1\273\1\0\1\273\11\0\1\273\10\0\1\163\1\255"+
    "\4\0\1\256\1\0\1\257\1\260\1\261\1\262\1\263"+
    "\1\264\1\265\2\0\1\265\1\325\1\262\1\0\1\262"+
    "\1\256\1\0\1\266\1\0\2\267\1\270\2\0\1\262"+
    "\1\266\1\264\4\0\1\163\11\0\1\271\2\272\1\273"+
    "\6\0\1\326\1\273\1\0\1\273\11\0\1\273\20\0"+
    "\1\157\1\21\1\157\1\21\6\0\2\21\1\0\1\21"+
    "\11\0\1\21\4\0\1\322\3\0\1\304\7\0\1\303"+
    "\3\21\6\0\2\21\1\0\1\21\11\0\1\21\3\0"+
    "\1\305\1\21\1\0\1\304\11\0\1\157\3\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\4\0\1\322\3\0"+
    "\1\251\1\0\1\327\41\0\1\66\1\0\1\251\1\0"+
    "\1\247\6\0\1\175\34\0\1\64\1\0\1\247\1\0"+
    "\1\247\4\0\1\330\36\0\1\64\1\0\1\247\1\0"+
    "\1\251\1\0\1\331\41\0\1\66\1\0\1\251\1\0"+
    "\1\247\16\0\1\332\24\0\1\64\1\0\1\247\1\0"+
    "\1\247\43\0\1\64\1\0\1\247\1\0\1\176\5\0"+
    "\1\137\1\0\1\333\1\0\1\254\1\143\1\144\1\145"+
    "\1\146\2\0\1\146\2\143\1\0\1\143\1\137\1\0"+
    "\1\147\1\0\2\150\1\151\2\0\1\143\1\147\1\145"+
    "\4\0\1\176\1\0\1\177\1\207\4\0\1\334\1\0"+
    "\1\335\1\212\1\336\1\214\1\337\1\216\1\265\2\0"+
    "\1\265\1\320\1\262\1\0\1\262\1\334\1\0\1\220"+
    "\1\0\2\267\1\270\2\0\1\214\1\220\1\216\4\0"+
    "\1\177\1\0\1\251\30\0\1\173\12\0\1\66\1\0"+
    "\1\251\1\0\1\247\32\0\1\340\10\0\1\64\1\0"+
    "\1\247\1\0\1\247\1\0\1\341\41\0\1\64\1\0"+
    "\1\247\1\0\1\342\3\0\1\343\37\0\1\106\1\0"+
    "\1\342\1\0\1\344\4\0\1\345\36\0\1\110\1\0"+
    "\1\344\1\0\1\346\35\0\1\347\5\0\1\112\1\0"+
    "\1\346\1\0\1\206\1\207\4\0\1\210\1\0\1\350"+
    "\1\214\1\351\1\214\1\215\1\216\1\217\2\0\1\217"+
    "\2\214\1\0\1\214\1\210\1\0\1\220\1\0\2\221"+
    "\1\222\2\0\1\214\1\220\1\216\4\0\1\206\3\0"+
    "\1\352\52\0\1\353\27\0\1\354\22\0\1\355\3\214"+
    "\6\0\2\214\1\0\1\214\11\0\1\214\10\0\1\356"+
    "\7\0\4\355\6\0\2\355\1\0\1\355\11\0\1\355"+
    "\3\0\1\357\2\0\1\356\1\0\1\356\7\0\3\214"+
    "\1\355\6\0\2\355\1\0\1\355\11\0\1\355\3\0"+
    "\1\357\2\0\1\356\1\0\1\356\42\0\1\357\2\0"+
    "\1\356\6\0\1\360\1\361\74\0\1\362\22\0\1\363"+
    "\43\0\1\364\64\0\1\365\32\0\1\366\55\0\4\225"+
    "\6\0\2\225\1\0\1\225\11\0\1\225\20\0\4\225"+
    "\6\0\2\225\1\0\1\225\11\0\1\225\4\0\1\367"+
    "\47\0\1\367\3\0\1\356\7\0\1\355\1\0\1\355"+
    "\30\0\1\357\2\0\1\356\11\0\1\225\1\0\1\225"+
    "\31\0\1\367\3\0\1\356\7\0\1\355\32\0\1\357"+
    "\2\0\1\356\11\0\1\225\33\0\1\367\3\0\1\346"+
    "\1\0\1\370\41\0\1\112\1\0\1\346\1\0\1\344"+
    "\6\0\1\237\34\0\1\110\1\0\1\344\1\0\1\344"+
    "\4\0\1\371\36\0\1\110\1\0\1\344\1\0\1\346"+
    "\1\0\1\372\41\0\1\112\1\0\1\346\1\0\1\344"+
    "\16\0\1\373\24\0\1\110\1\0\1\344\1\0\1\344"+
    "\43\0\1\110\1\0\1\344\1\0\1\240\5\0\1\210"+
    "\1\0\1\374\1\0\1\351\1\214\1\215\1\216\1\217"+
    "\2\0\1\217\2\214\1\0\1\214\1\210\1\0\1\220"+
    "\1\0\2\221\1\222\2\0\1\214\1\220\1\216\4\0"+
    "\1\240\1\0\1\241\5\0\1\375\1\0\1\376\1\0"+
    "\1\377\1\0\1\u0100\1\0\1\217\2\0\1\217\2\214"+
    "\1\0\1\214\1\375\3\0\2\221\1\222\11\0\1\241"+
    "\1\0\1\346\30\0\1\235\12\0\1\112\1\0\1\346"+
    "\1\0\1\344\32\0\1\u0101\10\0\1\110\1\0\1\344"+
    "\1\0\1\344\1\0\1\u0102\41\0\1\110\1\0\1\344"+
    "\1\0\1\245\7\0\1\u0103\2\u0104\1\303\6\0\2\303"+
    "\1\0\1\303\11\0\1\303\6\0\1\245\6\0\1\u0105"+
    "\42\0\1\247\7\0\1\u0103\2\u0104\1\303\6\0\1\u0106"+
    "\1\303\1\0\1\303\11\0\1\303\6\0\1\247\31\0"+
    "\1\u0107\17\0\1\251\7\0\1\u0103\2\u0104\1\303\6\0"+
    "\1\u0108\1\303\1\0\1\303\11\0\1\303\6\0\1\251"+
    "\25\0\1\327\34\0\3\143\6\0\2\143\1\0\1\143"+
    "\11\0\1\143\10\0\1\304\7\0\3\143\1\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\3\0\1\305\1\21"+
    "\1\0\1\304\3\0\1\u0109\52\0\1\u010a\27\0\1\u010b"+
    "\22\0\1\u010c\3\262\6\0\2\262\1\0\1\262\11\0"+
    "\1\262\10\0\1\u010d\7\0\4\u010c\6\0\2\u010c\1\0"+
    "\1\u010c\11\0\1\u010c\3\0\1\u010e\1\21\1\0\1\u010d"+
    "\1\0\1\u010d\7\0\3\262\1\u010c\6\0\2\u010c\1\0"+
    "\1\u010c\11\0\1\u010c\3\0\1\u010e\1\21\1\0\1\u010d"+
    "\1\0\1\u010d\7\0\4\21\6\0\2\21\1\0\1\21"+
    "\11\0\1\21\3\0\1\u010e\1\21\1\0\1\u010d\6\0"+
    "\1\u010f\1\u0110\74\0\1\u0111\22\0\1\u0112\43\0\1\u0113"+
    "\64\0\1\u0114\32\0\1\u0115\55\0\4\273\6\0\2\273"+
    "\1\0\1\273\11\0\1\273\20\0\4\273\6\0\2\273"+
    "\1\0\1\273\11\0\1\273\4\0\1\u0116\13\0\4\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\4\0\1\u0116"+
    "\3\0\1\u010d\7\0\1\u010c\1\21\1\u010c\1\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\3\0\1\u010e\1\21"+
    "\1\0\1\u010d\11\0\1\273\1\21\1\273\1\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\4\0\1\u0116\3\0"+
    "\1\u010d\7\0\1\u010c\3\21\6\0\2\21\1\0\1\21"+
    "\11\0\1\21\3\0\1\u010e\1\21\1\0\1\u010d\11\0"+
    "\1\273\3\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\4\0\1\u0116\6\0\1\u0117\73\0\1\u0118\24\0\1\u0119"+
    "\53\0\4\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\3\0\1\305\1\21\3\0\1\304\10\0\1\u011a\1\u011b"+
    "\33\0\1\304\1\0\1\304\45\0\1\304\16\0\1\u011c"+
    "\6\0\1\u011d\40\0\1\u011e\74\0\1\u011f\11\0\1\u0120"+
    "\2\0\1\143\75\0\1\u0121\43\0\1\u0122\35\0\1\u011f"+
    "\40\0\1\355\3\262\6\0\2\262\1\0\1\262\11\0"+
    "\1\262\10\0\1\u010d\7\0\4\355\6\0\2\355\1\0"+
    "\1\355\11\0\1\355\3\0\1\u010e\1\21\1\0\1\u010d"+
    "\1\0\1\u010d\7\0\3\262\1\355\6\0\2\355\1\0"+
    "\1\355\11\0\1\355\3\0\1\u010e\1\21\1\0\1\u010d"+
    "\1\0\1\u010d\7\0\1\355\1\21\1\355\1\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\3\0\1\u010e\1\21"+
    "\1\0\1\u010d\1\0\1\u010d\7\0\1\355\3\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\3\0\1\u010e\1\21"+
    "\1\0\1\u010d\11\0\1\u0123\1\u0124\1\u0125\1\u0123\6\0"+
    "\2\u0123\1\0\1\u0123\11\0\1\u0123\10\0\1\u010d\7\0"+
    "\1\303\1\21\1\303\1\21\6\0\2\21\1\0\1\21"+
    "\11\0\1\21\3\0\1\u010e\1\21\1\0\1\u010d\11\0"+
    "\1\157\1\21\1\157\1\21\6\0\2\21\1\0\1\21"+
    "\11\0\1\21\4\0\1\u0116\3\0\1\u010d\7\0\1\u010c"+
    "\1\21\1\355\1\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\3\0\1\u010e\1\21\1\0\1\u010d\11\0\1\273"+
    "\1\21\1\225\1\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\4\0\1\u0116\3\0\1\251\43\0\1\66\1\0"+
    "\1\251\7\0\1\u0126\62\0\1\u0127\46\0\1\175\41\0"+
    "\2\143\6\0\2\143\1\0\1\143\11\0\1\143\15\0"+
    "\1\u010a\27\0\1\354\22\0\1\355\1\214\1\262\1\214"+
    "\6\0\2\262\1\0\1\262\11\0\1\214\10\0\1\u010d"+
    "\7\0\2\262\1\214\1\355\6\0\2\355\1\0\1\355"+
    "\11\0\1\355\3\0\1\u010e\1\21\1\0\1\u010d\6\0"+
    "\1\u0128\1\u0110\44\0\1\u0129\65\0\1\340\26\0\1\342"+
    "\7\0\1\u012a\2\u012b\1\355\6\0\2\355\1\0\1\355"+
    "\11\0\1\355\6\0\1\342\6\0\1\u012c\42\0\1\344"+
    "\7\0\1\u012a\2\u012b\1\355\6\0\1\u012d\1\355\1\0"+
    "\1\355\11\0\1\355\6\0\1\344\31\0\1\u012e\17\0"+
    "\1\346\7\0\1\u012a\2\u012b\1\355\6\0\1\u012f\1\355"+
    "\1\0\1\355\11\0\1\355\6\0\1\346\25\0\1\370"+
    "\34\0\3\214\6\0\2\214\1\0\1\214\11\0\1\214"+
    "\10\0\1\356\7\0\3\214\30\0\1\357\2\0\1\356"+
    "\4\0\1\u0130\73\0\1\u0131\24\0\1\u0132\106\0\1\357"+
    "\4\0\1\356\10\0\1\u0133\1\u0134\33\0\1\356\1\0"+
    "\1\356\45\0\1\356\16\0\1\u0135\6\0\1\u0136\40\0"+
    "\1\u0137\74\0\1\u0138\11\0\1\u0139\2\0\1\214\75\0"+
    "\1\u013a\43\0\1\u013b\35\0\1\u0138\40\0\1\u013c\1\u013d"+
    "\1\u013e\1\u013c\6\0\2\u013c\1\0\1\u013c\11\0\1\u013c"+
    "\10\0\1\346\43\0\1\112\1\0\1\346\7\0\1\u013f"+
    "\62\0\1\u0140\46\0\1\237\41\0\2\214\6\0\2\214"+
    "\1\0\1\214\11\0\1\214\15\0\1\353\54\0\1\214"+
    "\7\0\2\214\1\0\1\214\22\0\1\356\7\0\2\214"+
    "\31\0\1\357\2\0\1\356\6\0\1\u0141\1\361\44\0"+
    "\1\u0142\65\0\1\u0101\36\0\4\303\6\0\2\303\1\0"+
    "\1\303\11\0\1\303\20\0\4\303\6\0\2\303\1\0"+
    "\1\303\11\0\1\303\3\0\1\305\1\21\11\0\1\u0143"+
    "\51\0\1\303\1\21\1\303\1\21\6\0\2\21\1\0"+
    "\1\21\11\0\1\21\3\0\1\305\1\21\34\0\1\175"+
    "\26\0\1\303\3\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\3\0\1\305\1\21\6\0\1\u0144\73\0\1\u0145"+
    "\24\0\1\u0146\53\0\4\21\6\0\2\21\1\0\1\21"+
    "\11\0\1\21\3\0\1\u010e\1\21\3\0\1\u010d\10\0"+
    "\1\u0147\1\u0148\33\0\1\u010d\1\0\1\u010d\45\0\1\u010d"+
    "\16\0\1\u0149\6\0\1\u014a\40\0\1\u014b\74\0\1\u014c"+
    "\11\0\1\u014d\2\0\1\262\75\0\1\u014e\43\0\1\u014f"+
    "\35\0\1\u014c\40\0\1\u0150\1\u0151\1\u0152\1\u0150\6\0"+
    "\2\u0150\1\0\1\u0150\11\0\1\u0150\10\0\1\304\3\0"+
    "\1\u0153\3\0\4\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\3\0\1\305\1\21\1\0\1\304\1\0\1\304"+
    "\4\0\1\u0154\2\0\4\21\6\0\2\21\1\0\1\21"+
    "\11\0\1\21\3\0\1\305\1\21\1\0\1\304\1\0"+
    "\1\304\7\0\4\21\6\0\2\21\1\0\1\21\10\0"+
    "\1\u0155\1\21\3\0\1\305\1\21\1\0\1\304\11\0"+
    "\3\u0156\7\0\1\u0156\1\u0157\13\0\1\u0156\23\0\1\u0156"+
    "\7\0\1\u0156\1\0\1\u0156\22\0\1\304\1\0\1\143"+
    "\5\0\4\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\3\0\1\305\1\21\1\0\1\304\1\0\1\304\6\0"+
    "\1\143\4\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\3\0\1\305\1\21\1\0\1\304\1\0\1\304\4\0"+
    "\1\u0158\2\0\4\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\3\0\1\305\1\21\1\0\1\304\1\0\1\304"+
    "\1\0\1\u0159\5\0\4\21\6\0\2\21\1\0\1\21"+
    "\11\0\1\21\3\0\1\305\1\21\1\0\1\304\1\0"+
    "\1\304\7\0\4\21\3\0\1\u015a\2\0\2\21\1\0"+
    "\1\21\11\0\1\21\3\0\1\305\1\21\1\0\1\304"+
    "\1\0\1\304\7\0\4\21\6\0\2\21\1\0\1\21"+
    "\3\0\1\u011f\5\0\1\21\3\0\1\305\1\21\1\0"+
    "\1\304\1\0\1\304\7\0\4\21\6\0\2\21\1\0"+
    "\1\21\5\0\1\u015b\3\0\1\21\3\0\1\305\1\21"+
    "\1\0\1\304\11\0\4\u015c\6\0\2\u015c\1\0\1\u015c"+
    "\11\0\1\u015c\20\0\3\u015d\1\u015c\6\0\1\u015d\1\u015e"+
    "\1\0\1\u015c\11\0\1\u015d\20\0\3\u015c\1\u015d\6\0"+
    "\1\u015c\1\u015d\1\0\1\u015d\11\0\1\u015c\14\0\1\u015f"+
    "\46\0\1\u0160\61\0\1\u0135\6\0\1\u014a\25\0\1\u0161"+
    "\55\0\4\355\6\0\2\355\1\0\1\355\11\0\1\355"+
    "\20\0\4\355\6\0\2\355\1\0\1\355\11\0\1\355"+
    "\3\0\1\357\12\0\1\u0162\51\0\1\355\1\0\1\355"+
    "\30\0\1\357\35\0\1\237\26\0\1\355\32\0\1\357"+
    "\4\0\1\356\3\0\1\u0163\36\0\1\357\2\0\1\356"+
    "\1\0\1\356\4\0\1\u0164\35\0\1\357\2\0\1\356"+
    "\1\0\1\356\35\0\1\u0165\4\0\1\357\2\0\1\356"+
    "\11\0\3\u0166\7\0\1\u0166\1\u0167\13\0\1\u0166\23\0"+
    "\1\u0166\7\0\1\u0166\1\0\1\u0166\22\0\1\356\1\0"+
    "\1\214\40\0\1\357\2\0\1\356\1\0\1\356\6\0"+
    "\1\214\33\0\1\357\2\0\1\356\1\0\1\356\4\0"+
    "\1\u0168\35\0\1\357\2\0\1\356\1\0\1\356\1\0"+
    "\1\u0169\40\0\1\357\2\0\1\356\1\0\1\356\16\0"+
    "\1\u016a\23\0\1\357\2\0\1\356\1\0\1\356\30\0"+
    "\1\u0138\11\0\1\357\2\0\1\356\1\0\1\356\32\0"+
    "\1\u016b\7\0\1\357\2\0\1\356\11\0\4\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\20\0\3\u016c\1\21"+
    "\6\0\1\u016c\1\u016d\1\0\1\21\11\0\1\u016c\20\0"+
    "\3\21\1\u016c\6\0\1\21\1\u016c\1\0\1\u016c\11\0"+
    "\1\21\14\0\1\u016e\46\0\1\u016f\70\0\1\u0136\25\0"+
    "\1\u0170\51\0\1\u0171\43\0\1\u010d\3\0\1\u0172\3\0"+
    "\4\21\6\0\2\21\1\0\1\21\11\0\1\21\3\0"+
    "\1\u010e\1\21\1\0\1\u010d\1\0\1\u010d\4\0\1\u0173"+
    "\2\0\4\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\3\0\1\u010e\1\21\1\0\1\u010d\1\0\1\u010d\7\0"+
    "\4\21\6\0\2\21\1\0\1\21\10\0\1\u0174\1\21"+
    "\3\0\1\u010e\1\21\1\0\1\u010d\11\0\3\u0175\7\0"+
    "\1\u0175\1\u0176\13\0\1\u0175\23\0\1\u0175\7\0\1\u0175"+
    "\1\0\1\u0175\22\0\1\u010d\1\0\1\262\5\0\4\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\3\0\1\u010e"+
    "\1\21\1\0\1\u010d\1\0\1\u010d\6\0\1\262\4\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\3\0\1\u010e"+
    "\1\21\1\0\1\u010d\1\0\1\u010d\4\0\1\u0177\2\0"+
    "\4\21\6\0\2\21\1\0\1\21\11\0\1\21\3\0"+
    "\1\u010e\1\21\1\0\1\u010d\1\0\1\u010d\1\0\1\u0178"+
    "\5\0\4\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\3\0\1\u010e\1\21\1\0\1\u010d\1\0\1\u010d\7\0"+
    "\4\21\3\0\1\u0179\2\0\2\21\1\0\1\21\11\0"+
    "\1\21\3\0\1\u010e\1\21\1\0\1\u010d\1\0\1\u010d"+
    "\7\0\4\21\6\0\2\21\1\0\1\21\3\0\1\u014c"+
    "\5\0\1\21\3\0\1\u010e\1\21\1\0\1\u010d\1\0"+
    "\1\u010d\7\0\4\21\6\0\2\21\1\0\1\21\5\0"+
    "\1\u017a\3\0\1\21\3\0\1\u010e\1\21\1\0\1\u010d"+
    "\11\0\4\u017b\6\0\2\u017b\1\0\1\u017b\11\0\1\u017b"+
    "\20\0\3\u017c\1\u017b\6\0\1\u017c\1\u017d\1\0\1\u017b"+
    "\11\0\1\u017c\20\0\3\u017b\1\u017c\6\0\1\u017b\1\u017c"+
    "\1\0\1\u017c\11\0\1\u017b\15\0\1\u0158\72\0\1\u017e"+
    "\43\0\1\143\33\0\4\u0123\6\0\2\u0123\1\0\1\u0123"+
    "\11\0\1\u0123\20\0\1\u017f\45\0\1\u0180\62\0\1\u015b"+
    "\46\0\1\143\32\0\1\u0181\54\0\4\21\6\0\2\21"+
    "\1\0\1\21\11\0\1\21\4\0\1\21\13\0\4\u0182"+
    "\6\0\2\u0182\1\0\1\u0182\11\0\1\u0182\4\0\1\21"+
    "\13\0\1\u0183\3\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\4\0\1\21\12\0\1\175\42\0\1\u0184\51\0"+
    "\1\175\47\0\1\u0185\50\0\1\u0168\72\0\1\u0186\43\0"+
    "\1\214\33\0\4\u013c\6\0\2\u013c\1\0\1\u013c\11\0"+
    "\1\u013c\20\0\1\u0187\45\0\1\u0188\62\0\1\u016b\46\0"+
    "\1\214\32\0\1\u0189\53\0\1\237\42\0\1\u018a\51\0"+
    "\1\237\52\0\1\u018b\45\0\1\u0177\72\0\1\u018c\43\0"+
    "\1\262\33\0\4\u0150\6\0\2\u0150\1\0\1\u0150\11\0"+
    "\1\u0150\20\0\1\u018d\45\0\1\u018e\62\0\1\u017a\46\0"+
    "\1\262\32\0\1\u018f\54\0\4\u0190\6\0\2\u0190\1\0"+
    "\1\u0190\11\0\1\u0190\4\0\1\21\13\0\1\u0191\3\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\4\0\1\21"+
    "\34\0\1\143\26\0\1\u015c\43\0\1\u0192\45\0\1\u0193"+
    "\51\0\1\327\52\0\1\u0194\71\0\1\214\26\0\1\21"+
    "\43\0\1\u0195\45\0\1\u0196\51\0\1\370\43\0\1\245"+
    "\43\0\1\57\1\0\1\245\32\0\1\262\26\0\1\u017b"+
    "\43\0\1\u0197\45\0\1\u0198\54\0\1\143\44\0\1\143"+
    "\43\0\1\342\43\0\1\106\1\0\1\342\10\0\1\214"+
    "\44\0\1\214\52\0\1\262\44\0\1\262\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16040];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\17\1\1\11\117\0\3\1\12\0\3\1\4\0"+
    "\3\1\22\0\3\1\7\0\6\1\22\0\1\1\3\0"+
    "\3\1\7\0\6\1\3\0\1\1\12\0\11\1\7\0"+
    "\1\1\12\0\1\1\3\0\1\1\21\0\1\1\4\0"+
    "\1\1\1\0\1\1\1\0\1\1\3\0\1\1\11\0"+
    "\4\1\2\0\7\1\10\0\1\1\1\0\1\1\1\0"+
    "\4\1\2\0\7\1\10\0\3\1\2\0\7\1\14\0"+
    "\3\1\15\0\2\1\15\0\3\1\4\0\2\1\14\0"+
    "\2\1\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  void echo() {
    int len = yylength();       // Find length of current lexeme
    for (int i=0; i<len; i++) { // Run through each character in turn
      char c = yycharat(i);
      switch (c) {              // and translate as appropriate ...
        case '<' : System.out.print("&lt;");  break;
        case '>' : System.out.print("&gt;");  break;
        case '&' : System.out.print("&amp;"); break;
        default  : System.out.print(c);       break;
      }
    }
  }
  void tag(String cl) {
    System.out.print("<span class=\"" + cl + "\">");
    echo();
    System.out.print("</span>");
  }
  void date() { tag("date"); }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  HighlightDates(java.io.Reader in) {
    System.out.println("<html>");
  System.out.println("<head>");
  System.out.println("<title>My Syntax Colored Web Page</title>");
  System.out.println("<style type=\"text/css\">");
  System.out.println("  body     {white-space:pre;");
  System.out.println("            background-color:#ffffcc;");
  System.out.println("            color:black;");
  System.out.println("            font-family:\"Lucida Console\",\"Courier New\",Monotype}");
  System.out.println("  .date {background-color:white; color:green}");
  System.out.println("</style>");
  System.out.println("</head>");
  System.out.println("<body>");
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  HighlightDates(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      System.out.println("</body>");
  System.out.println("</html>");

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { date();
          }
        case 3: break;
        case 1: 
          { System.out.print(yytext());
          }
        case 4: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java HighlightDates <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        HighlightDates scanner = null;
        try {
          scanner = new HighlightDates( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
