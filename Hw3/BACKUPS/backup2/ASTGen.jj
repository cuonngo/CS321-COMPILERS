

PARSER_BEGIN(ASTGen)

public class ASTGen {
	public static void main(String args[]) throws ParseException {
		new ASTGen(System.in);
		Top();
		System.out.println("Input is valid");
	}
}

PARSER_END(ASTGen)

//-- Define the grammatical rules of the input language: ---------------------


void Top() : { } { 
	(Class())* <EOF>
}

void Class() : { } { 
	/*("abstract")? 
	"class" Id() 
	("(" Args() ")")?
	("{" (Class())* "}")?*/
	
}

Args Args() : {Args before; Arg last; } { 
	//(Arg() ("," Arg())*)?
	((last=Arg()
	 (","{before = new Args(Args(), last);}
	 | {before = new Args(null, last);}))
	 | {before = new Args(null, null);}){
		return before;
	}
}

Arg Arg() : {Token token; String vis, id; Type t; } { 
	//("public" | "protected" | "private")? Type() Id()
	(token = "public" {vis = token.image;}
	 |token = "protected" {vis = token.image;}
	 |token = "private" {vis = token.image;}
	 |{vis = null;})
	t = Type()
	id = Id(){
		return new Arg(vis, t, id);
	}

}

Type Type() : {Type t; ArrayType arrayT;} {
	//NameType() ("[" "]")*
	t = NameType()
	("[" "]" {t = new ArrayType(t);} | {return t;}){
		return t;
	}

}

Type NameType() : {String [] str;} {
	//StringArray()
	str = StringArray(0){
		return new NameType(str);
	}
}

String [] StringArray(int soFar) : {String [] s; String str;} {
	//Id() ("." Id())*
	str=Id()("." s=StringArray(soFar+1) | {s = new String[soFar + 1]; }){
		s[soFar] = str;
		return s;
	}
}

String Id() : {Token t;} {
	//IDENT
	t=<IDENT>{
		return t.image;
	}
}
//-- Define the lexical structure of an input language: ----------------------


SKIP : {
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

// Lexemes that should be reported as valid tokens:


TOKEN : {
	<IDENT : <START> (<PART>)*>
|	<#START : ["a"-"z", "A"-"Z"]>
|	<#PART : <START> | ["0"-"9", "_"]>
}
