/* The following code was generated by JFlex 1.4.3 on 1/28/16 3:10 PM */

// hw2 Highlight Dates

/* user code */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/28/16 3:10 PM from the specification file
 * <tt>HighlightDates.jflex</tt>
 */
class HighlightDates {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\45\25\0\1\43\1\51\1\54\3\0\1\52\1\0\1\47"+
    "\1\47\1\47\1\47\1\44\1\47\1\0\1\46\1\10\1\12\1\11"+
    "\1\22\1\37\1\23\1\13\1\25\1\25\1\13\1\0\1\47\1\51"+
    "\1\50\1\51\2\0\1\26\2\0\1\34\1\0\1\1\3\0\1\14"+
    "\2\0\1\16\1\41\1\32\3\0\1\40\7\0\1\47\1\0\1\47"+
    "\1\47\2\0\1\6\1\3\1\17\1\34\1\2\1\1\1\27\1\20"+
    "\1\36\1\14\1\0\1\24\1\21\1\15\1\33\1\35\1\0\1\4"+
    "\1\30\1\31\1\5\1\42\2\0\1\7\1\0\1\47\1\53\1\47"+
    "\1\47\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\20\1\1\2\1\1\3\2\75\0\1\2\37\0"+
    "\3\3\10\0\1\3\2\0\1\3\3\0\2\3\2\0"+
    "\4\3\47\0\3\1\10\0\1\1\2\0\1\1\3\0"+
    "\6\1\22\0\1\3\1\0\4\3\3\0\1\3\17\0"+
    "\1\1\2\3\7\0\1\3\12\0\3\3\10\0\1\3"+
    "\2\0\1\3\3\0\6\3\22\0\1\1\3\0\1\1"+
    "\27\0\1\1\5\0\1\3\1\0\5\3\2\0\15\3"+
    "\16\0\1\3\3\0\1\3\27\0\1\3\5\0\1\1"+
    "\1\0\5\1\2\0\15\1\26\0\2\3\5\0\1\3"+
    "\1\0\5\3\2\0\15\3\26\0\2\1\13\0\2\1"+
    "\20\0\2\3\13\0\2\1\16\0\2\1\13\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[582];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\55\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de"+
    "\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546"+
    "\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae"+
    "\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816"+
    "\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e"+
    "\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6"+
    "\0\u0de3\0\u0e10\0\u0e3d\0\u02d0\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1"+
    "\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059"+
    "\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1"+
    "\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329"+
    "\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491"+
    "\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9"+
    "\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761"+
    "\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9"+
    "\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31"+
    "\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99"+
    "\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01"+
    "\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69"+
    "\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1"+
    "\0\u1ffe\0\u202b\0\u2058\0\u2085\0\u20b2\0\u20df\0\u210c\0\u2139"+
    "\0\u2166\0\u2193\0\u21c0\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1"+
    "\0\u22ce\0\u22fb\0\u2328\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409"+
    "\0\u2436\0\u2463\0\u2490\0\u24bd\0\u24ea\0\u2517\0\u2544\0\u2571"+
    "\0\u259e\0\u25cb\0\u25f8\0\u2625\0\u2652\0\u267f\0\u26ac\0\u26d9"+
    "\0\u2706\0\u2733\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841"+
    "\0\u286e\0\u289b\0\u28c8\0\u28f5\0\u2922\0\u294f\0\u297c\0\u29a9"+
    "\0\u29d6\0\u2a03\0\u2a30\0\u2a5d\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11"+
    "\0\u2b3e\0\u2b6b\0\u2b98\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c\0\u2c79"+
    "\0\u2ca6\0\u2cd3\0\u2d00\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4\0\u2de1"+
    "\0\u2e0e\0\u2e3b\0\u2e68\0\u2e95\0\u2ec2\0\u2eef\0\u2f1c\0\u2f49"+
    "\0\u2f76\0\u2fa3\0\u2fd0\0\u2ffd\0\u302a\0\u3057\0\u3084\0\u30b1"+
    "\0\u30de\0\u310b\0\u21c0\0\u3138\0\u3165\0\u3192\0\u31bf\0\u31ec"+
    "\0\u3219\0\u3246\0\u3273\0\u32a0\0\u32cd\0\u32fa\0\u3327\0\u3354"+
    "\0\u3381\0\u33ae\0\u33db\0\u3408\0\u3435\0\u3462\0\u348f\0\u34bc"+
    "\0\u34e9\0\u3516\0\u3543\0\u3570\0\u359d\0\u35ca\0\u35f7\0\u3624"+
    "\0\u3651\0\u367e\0\u36ab\0\u36d8\0\u3705\0\u3732\0\u375f\0\u378c"+
    "\0\u37b9\0\u37e6\0\u3813\0\u3840\0\u386d\0\u389a\0\u38c7\0\u38f4"+
    "\0\u3921\0\u394e\0\u397b\0\u39a8\0\u39d5\0\u3a02\0\u3a2f\0\u3a5c"+
    "\0\u3a89\0\u3ab6\0\u3ae3\0\u3b10\0\u3b3d\0\u3b6a\0\u3b97\0\u3bc4"+
    "\0\u3bf1\0\u3c1e\0\u3c4b\0\u3c78\0\u3ca5\0\u3cd2\0\u3cff\0\u3d2c"+
    "\0\u3d59\0\u3d86\0\u3db3\0\u3de0\0\u3e0d\0\u3e3a\0\u3e67\0\u3e94"+
    "\0\u3ec1\0\u3eee\0\u3f1b\0\u3f48\0\u3f75\0\u3fa2\0\u3fcf\0\u3ffc"+
    "\0\u4029\0\u4056\0\u4083\0\u40b0\0\u40dd\0\u410a\0\u4137\0\u4164"+
    "\0\u4191\0\u41be\0\u41eb\0\u4218\0\u4245\0\u4272\0\u429f\0\u42cc"+
    "\0\u42f9\0\u4326\0\u4353\0\u4380\0\u43ad\0\u43da\0\u4407\0\u4434"+
    "\0\u4461\0\u448e\0\u44bb\0\u44e8\0\u4515\0\u4542\0\u456f\0\u459c"+
    "\0\u45c9\0\u45f6\0\u4623\0\u4650\0\u467d\0\u46aa\0\u46d7\0\u4704"+
    "\0\u4731\0\u475e\0\u478b\0\u47b8\0\u47e5\0\u4812\0\u483f\0\u486c"+
    "\0\u4899\0\u48c6\0\u48f3\0\u4920\0\u494d\0\u497a\0\u49a7\0\u49d4"+
    "\0\u4a01\0\u4a2e\0\u4a5b\0\u4a88\0\u4ab5\0\u4ae2\0\u4b0f\0\u4b3c"+
    "\0\u4b69\0\u4b96\0\u4bc3\0\u4bf0\0\u4c1d\0\u4c4a\0\u4c77\0\u4ca4"+
    "\0\u4cd1\0\u4cfe\0\u4d2b\0\u4d58\0\u4d85\0\u4db2\0\u4ddf\0\u4e0c"+
    "\0\u4e39\0\u4e66\0\u4e93\0\u4ec0\0\u4eed\0\u4f1a\0\u4f47\0\u4f74"+
    "\0\u4fa1\0\u4fce\0\u4ffb\0\u5028\0\u5055\0\u5082\0\u50af\0\u50dc"+
    "\0\u5109\0\u5136\0\u5163\0\u5190\0\u51bd\0\u51ea\0\u5217\0\u5244"+
    "\0\u5271\0\u529e\0\u52cb\0\u52f8\0\u5325\0\u5352\0\u537f\0\u53ac"+
    "\0\u53d9\0\u5406\0\u5433\0\u5460\0\u548d\0\u54ba\0\u54e7\0\u5514"+
    "\0\u5541\0\u556e\0\u559b\0\u55c8\0\u55f5\0\u5622\0\u564f\0\u567c"+
    "\0\u56a9\0\u56d6\0\u5703\0\u5730\0\u575d\0\u578a\0\u57b7\0\u57e4"+
    "\0\u5811\0\u583e\0\u586b\0\u5898\0\u58c5\0\u58f2\0\u591f\0\u594c"+
    "\0\u5979\0\u59a6\0\u59d3\0\u5a00\0\u5a2d\0\u5a5a\0\u5a87\0\u5ab4"+
    "\0\u5ae1\0\u5b0e\0\u3fcf\0\u5a2d\0\u5b3b\0\u5b68\0\u5b95\0\u5bc2"+
    "\0\u5bef\0\u5c1c\0\u5c49\0\u5c76\0\u5ca3\0\u5cd0\0\u5cfd\0\u5d2a"+
    "\0\u5d57\0\u5d84\0\u5db1\0\u5dde\0\u5e0b\0\u5e38\0\u5e65\0\u5e92"+
    "\0\u5ebf\0\u5eec\0\u5f19\0\u5f46\0\u5f73\0\u5fa0\0\u5fcd\0\u5ffa"+
    "\0\u6027\0\u4c1d\0\u5f46\0\u6054\0\u6081\0\u60ae\0\u60db\0\u6108"+
    "\0\u6135\0\u6162\0\u618f\0\u61bc\0\u61e9\0\u6216\0\u6243\0\u6270"+
    "\0\u629d\0\u5514\0\u61bc\0\u62ca\0\u62f7\0\u6324\0\u6351\0\u637e"+
    "\0\u63ab\0\u63d8\0\u6405\0\u6432\0\u645f\0\u648c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[582];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\4\2\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\2\1\13\1\14\1\15"+
    "\1\2\1\15\1\4\1\2\1\16\1\2\2\17\1\20"+
    "\2\2\1\10\1\16\1\12\1\2\1\21\1\22\1\23"+
    "\2\22\2\24\1\25\1\26\1\21\1\0\1\27\4\0"+
    "\1\30\1\0\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\2\0\1\37\1\40\1\41\1\0\1\41\1\30"+
    "\1\0\1\42\1\0\2\43\1\44\2\0\1\34\1\42"+
    "\1\36\14\0\1\27\1\45\3\0\1\30\1\0\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\2\0\1\37"+
    "\1\40\1\41\1\0\1\41\1\30\1\0\1\42\1\0"+
    "\2\43\1\44\2\0\1\34\1\42\1\36\14\0\1\27"+
    "\3\0\1\46\1\30\1\0\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\2\0\1\37\1\40\1\41\1\0"+
    "\1\41\1\30\1\0\1\42\1\0\2\43\1\44\1\47"+
    "\1\0\1\34\1\42\1\36\14\0\1\27\4\0\1\30"+
    "\1\0\1\50\1\51\1\52\1\53\1\35\1\36\1\37"+
    "\2\0\1\37\1\54\1\55\1\0\1\55\1\30\1\0"+
    "\1\42\1\0\2\43\1\44\2\0\1\53\1\42\1\36"+
    "\14\0\1\27\4\0\1\30\1\0\1\50\1\56\1\57"+
    "\1\60\1\35\1\36\1\37\2\0\1\37\1\61\1\62"+
    "\1\0\1\62\1\30\1\0\1\42\1\0\2\43\1\44"+
    "\2\0\1\60\1\42\1\36\1\0\1\63\1\0\1\64"+
    "\1\65\7\0\1\27\4\0\1\30\1\0\1\66\1\67"+
    "\1\70\1\60\1\35\1\36\1\37\2\0\1\37\1\61"+
    "\1\62\1\0\1\62\1\30\1\0\1\42\1\0\2\43"+
    "\1\44\2\0\1\60\1\42\1\36\1\0\1\71\1\0"+
    "\1\64\1\72\7\0\1\27\4\0\1\30\1\0\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\2\0\1\37"+
    "\1\40\1\41\1\0\1\41\1\30\1\0\1\42\1\0"+
    "\2\43\1\44\2\0\1\34\1\42\1\36\1\0\1\73"+
    "\1\0\1\64\1\74\7\0\1\27\3\0\1\75\1\76"+
    "\1\0\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\0\1\37\1\40\1\41\1\0\1\41\1\30\1\0"+
    "\1\42\1\0\2\43\1\44\2\0\1\34\1\42\1\36"+
    "\14\0\1\27\4\0\1\30\1\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\0\1\37\1\40\1\41"+
    "\1\0\1\41\1\30\1\0\1\42\1\0\1\43\1\77"+
    "\1\44\2\0\1\34\1\42\1\36\14\0\1\27\4\0"+
    "\1\100\1\0\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\2\0\1\37\1\40\1\41\1\0\1\41\1\30"+
    "\1\0\1\42\1\0\2\43\1\44\2\0\1\34\1\42"+
    "\1\36\14\0\1\27\4\0\1\30\1\0\1\101\1\32"+
    "\1\102\1\34\1\35\1\36\1\37\2\0\1\37\1\40"+
    "\1\41\1\0\1\41\1\30\1\0\1\42\1\0\2\43"+
    "\1\44\2\0\1\34\1\42\1\36\1\0\1\71\1\0"+
    "\1\64\1\72\7\0\1\27\4\0\1\30\1\0\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\2\0\1\37"+
    "\1\40\1\41\1\0\1\41\1\30\1\0\1\42\1\0"+
    "\2\43\1\44\2\0\1\34\1\42\1\36\1\0\1\71"+
    "\1\0\1\64\1\72\7\0\1\27\1\103\3\0\1\30"+
    "\1\0\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\0\1\37\1\40\1\41\1\0\1\41\1\30\1\0"+
    "\1\42\1\0\2\43\1\44\2\0\1\34\1\42\1\36"+
    "\14\0\1\27\4\0\1\30\1\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\104\1\0\1\37\1\40"+
    "\1\41\1\0\1\41\1\30\1\0\1\42\1\0\2\43"+
    "\1\44\2\0\1\34\1\42\1\36\14\0\1\27\1\105"+
    "\3\0\1\30\1\0\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\2\0\1\37\1\40\1\41\1\0\1\41"+
    "\1\30\1\0\1\42\1\0\2\43\1\44\2\0\1\34"+
    "\1\42\1\36\71\0\1\106\4\0\1\107\1\0\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\2\0\1\116"+
    "\1\117\1\120\1\0\1\120\1\107\1\0\1\121\1\0"+
    "\2\122\1\123\2\0\1\113\1\121\1\115\14\0\1\27"+
    "\4\0\1\30\1\0\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\2\0\1\37\1\40\1\41\1\0\1\41"+
    "\1\30\1\0\1\42\1\0\2\43\1\44\2\0\1\34"+
    "\1\42\1\36\6\0\1\124\5\0\1\27\4\0\1\30"+
    "\1\0\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\0\1\37\1\40\1\41\1\0\1\41\1\30\1\0"+
    "\1\42\1\0\2\43\1\44\2\0\1\34\1\42\1\36"+
    "\10\0\1\124\3\0\1\27\4\0\1\30\1\0\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\2\0\1\37"+
    "\1\40\1\41\1\0\1\41\1\30\1\0\1\42\1\0"+
    "\2\43\1\44\2\0\1\34\1\42\1\36\11\0\1\124"+
    "\3\0\1\125\57\0\1\126\27\0\1\127\27\0\1\130"+
    "\1\131\1\41\1\34\6\0\2\41\1\0\1\41\11\0"+
    "\1\34\25\0\4\130\6\0\2\130\1\0\1\130\11\0"+
    "\1\130\3\0\1\132\1\0\1\133\1\134\16\0\2\41"+
    "\1\34\1\130\6\0\2\130\1\0\1\130\11\0\1\130"+
    "\3\0\1\135\1\0\1\133\1\136\51\0\1\137\1\0"+
    "\1\133\1\140\13\0\1\141\1\142\101\0\1\143\27\0"+
    "\1\144\56\0\1\145\1\0\1\146\30\0\1\135\1\0"+
    "\1\133\1\136\51\0\1\135\1\0\1\133\1\136\10\0"+
    "\1\147\71\0\1\150\37\0\1\151\55\0\1\152\100\0"+
    "\1\153\31\0\1\154\60\0\1\130\1\131\1\41\1\34"+
    "\6\0\2\41\1\0\1\41\11\0\1\34\3\0\1\155"+
    "\1\0\1\64\17\0\4\130\6\0\2\130\1\0\1\130"+
    "\11\0\1\130\3\0\1\63\1\0\1\64\1\65\16\0"+
    "\2\41\1\34\1\130\6\0\2\130\1\0\1\130\11\0"+
    "\1\130\3\0\1\71\1\0\1\64\1\72\51\0\1\73"+
    "\1\0\1\64\1\74\16\0\1\145\1\0\1\146\30\0"+
    "\1\71\1\0\1\64\1\72\51\0\1\71\1\0\1\64"+
    "\1\72\16\0\4\130\6\0\2\130\1\0\1\130\11\0"+
    "\1\130\3\0\1\156\1\0\1\64\1\134\16\0\2\41"+
    "\1\34\1\130\6\0\2\130\1\0\1\130\11\0\1\130"+
    "\3\0\1\157\1\0\1\64\1\136\51\0\1\160\1\0"+
    "\1\64\1\140\16\0\1\145\1\0\1\146\30\0\1\157"+
    "\1\0\1\64\1\136\51\0\1\157\1\0\1\64\1\136"+
    "\7\0\1\161\4\0\1\162\1\0\1\163\1\164\1\165"+
    "\1\166\1\167\1\170\1\171\2\0\1\171\2\166\1\0"+
    "\1\166\1\162\1\0\1\172\1\0\2\173\1\174\2\0"+
    "\1\166\1\172\1\170\1\0\1\64\1\0\1\64\15\0"+
    "\1\175\1\0\1\176\1\0\1\177\1\0\1\200\1\0"+
    "\1\201\2\0\1\201\2\202\1\0\1\202\1\175\3\0"+
    "\2\203\1\204\6\0\1\64\1\0\1\64\17\0\1\205"+
    "\2\206\1\207\6\0\2\207\1\0\1\207\11\0\1\207"+
    "\25\0\1\130\1\131\1\41\1\34\6\0\2\41\1\0"+
    "\1\41\11\0\1\34\3\0\1\71\1\0\1\64\1\72"+
    "\16\0\4\130\6\0\2\130\1\0\1\130\11\0\1\130"+
    "\3\0\1\71\1\0\1\64\1\72\16\0\2\41\1\34"+
    "\1\130\6\0\2\130\1\0\1\130\11\0\1\130\3\0"+
    "\1\210\1\0\1\64\1\211\7\0\1\161\4\0\1\162"+
    "\1\0\1\163\1\164\1\165\1\166\1\167\1\170\1\171"+
    "\2\0\1\171\1\212\1\166\1\0\1\166\1\162\1\0"+
    "\1\172\1\0\2\173\1\174\2\0\1\166\1\172\1\170"+
    "\1\0\1\64\1\0\1\64\17\0\1\205\2\206\1\207"+
    "\6\0\1\213\1\207\1\0\1\207\11\0\1\207\16\0"+
    "\1\161\4\0\1\162\1\0\1\163\1\164\1\165\1\166"+
    "\1\167\1\170\1\171\2\0\1\171\1\214\1\166\1\0"+
    "\1\166\1\162\1\0\1\172\1\0\2\173\1\174\2\0"+
    "\1\166\1\172\1\170\1\0\1\64\1\0\1\64\17\0"+
    "\1\205\2\206\1\207\6\0\1\215\1\207\1\0\1\207"+
    "\11\0\1\207\32\0\1\216\6\0\1\217\35\0\1\126"+
    "\7\0\1\220\17\0\1\127\36\0\1\150\22\0\1\221"+
    "\16\0\1\222\1\126\1\0\1\223\25\0\1\127\27\0"+
    "\1\130\1\131\1\41\1\34\6\0\2\41\1\0\1\41"+
    "\11\0\1\34\3\0\1\224\1\0\1\64\17\0\2\41"+
    "\1\34\1\130\6\0\2\130\1\0\1\130\11\0\1\130"+
    "\3\0\1\225\1\0\1\64\1\136\43\0\1\226\50\0"+
    "\1\227\42\0\1\230\37\0\1\231\57\0\1\232\27\0"+
    "\1\233\27\0\1\234\1\235\1\120\1\113\6\0\2\120"+
    "\1\0\1\120\11\0\1\113\25\0\4\234\6\0\2\234"+
    "\1\0\1\234\11\0\1\234\3\0\1\236\1\0\1\237"+
    "\1\240\16\0\2\120\1\113\1\234\6\0\2\234\1\0"+
    "\1\234\11\0\1\234\3\0\1\241\1\0\1\237\1\242"+
    "\51\0\1\243\1\0\1\237\1\244\13\0\1\245\1\246"+
    "\101\0\1\247\27\0\1\250\56\0\1\251\1\0\1\252"+
    "\30\0\1\241\1\0\1\237\1\242\51\0\1\241\1\0"+
    "\1\237\1\242\10\0\1\253\71\0\1\254\37\0\1\255"+
    "\55\0\1\256\100\0\1\257\31\0\1\260\113\0\1\261"+
    "\1\0\1\133\52\0\1\132\1\0\1\133\1\134\7\0"+
    "\1\262\4\0\1\263\1\0\1\264\1\265\1\266\1\267"+
    "\1\270\1\271\1\272\2\0\1\272\2\267\1\0\1\267"+
    "\1\263\1\0\1\273\1\0\2\274\1\275\2\0\1\267"+
    "\1\273\1\271\1\0\1\133\1\0\1\133\15\0\1\276"+
    "\1\0\1\277\1\0\1\300\1\0\1\301\1\0\1\302"+
    "\2\0\1\302\2\303\1\0\1\303\1\276\3\0\2\304"+
    "\1\305\6\0\1\133\1\0\1\133\17\0\1\306\2\307"+
    "\1\310\6\0\2\310\1\0\1\310\11\0\1\310\16\0"+
    "\1\262\4\0\1\263\1\0\1\264\1\265\1\266\1\267"+
    "\1\270\1\271\1\272\2\0\1\272\1\311\1\267\1\0"+
    "\1\267\1\263\1\0\1\273\1\0\2\274\1\275\2\0"+
    "\1\267\1\273\1\271\1\0\1\133\1\0\1\133\17\0"+
    "\1\306\2\307\1\310\6\0\1\312\1\310\1\0\1\310"+
    "\11\0\1\310\16\0\1\262\4\0\1\263\1\0\1\264"+
    "\1\265\1\266\1\267\1\270\1\271\1\272\2\0\1\272"+
    "\1\313\1\267\1\0\1\267\1\263\1\0\1\273\1\0"+
    "\2\274\1\275\2\0\1\267\1\273\1\271\1\0\1\133"+
    "\1\0\1\133\17\0\1\306\2\307\1\310\6\0\1\314"+
    "\1\310\1\0\1\310\11\0\1\310\32\0\1\315\6\0"+
    "\1\316\45\0\1\317\101\0\1\320\16\0\1\321\2\0"+
    "\1\322\110\0\1\323\1\0\1\133\52\0\1\324\1\0"+
    "\1\133\44\0\1\325\50\0\1\326\42\0\1\327\41\0"+
    "\1\330\36\0\1\331\2\0\1\65\13\0\1\332\35\0"+
    "\1\333\2\0\1\72\44\0\1\334\4\0\1\335\2\0"+
    "\1\74\7\0\1\161\4\0\1\162\1\0\1\336\1\166"+
    "\1\337\1\166\1\167\1\170\1\171\2\0\1\171\2\166"+
    "\1\0\1\166\1\162\1\0\1\172\1\0\2\173\1\174"+
    "\2\0\1\166\1\172\1\170\1\0\1\64\1\0\1\64"+
    "\10\0\1\161\4\0\1\162\1\0\1\340\1\341\1\342"+
    "\1\166\1\167\1\170\1\171\2\0\1\171\2\166\1\0"+
    "\1\166\1\162\1\0\1\172\1\0\2\173\1\174\2\0"+
    "\1\166\1\172\1\170\1\0\1\64\1\0\1\64\10\0"+
    "\1\161\4\0\1\162\1\0\1\340\1\341\1\342\1\166"+
    "\1\167\1\170\1\171\2\0\1\171\1\343\1\166\1\0"+
    "\1\166\1\162\1\0\1\172\1\0\2\173\1\174\2\0"+
    "\1\166\1\172\1\170\1\0\1\64\1\0\1\64\10\0"+
    "\1\161\4\0\1\162\1\0\1\340\1\341\1\342\1\166"+
    "\1\167\1\170\1\171\2\0\1\171\1\344\1\166\1\0"+
    "\1\166\1\162\1\0\1\172\1\0\2\173\1\174\2\0"+
    "\1\166\1\172\1\170\1\0\1\64\1\0\1\64\11\0"+
    "\1\345\57\0\1\346\27\0\1\347\27\0\1\350\3\166"+
    "\6\0\2\166\1\0\1\166\11\0\1\166\25\0\4\350"+
    "\6\0\2\350\1\0\1\350\11\0\1\350\3\0\1\351"+
    "\1\352\1\0\1\21\16\0\3\166\1\350\6\0\2\350"+
    "\1\0\1\350\11\0\1\350\3\0\1\351\1\352\1\0"+
    "\1\21\16\0\4\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\3\0\1\351\1\352\1\0\1\21\13\0\1\353"+
    "\1\354\101\0\1\355\27\0\1\356\50\0\1\357\71\0"+
    "\1\360\37\0\1\361\57\0\1\362\61\0\1\202\7\0"+
    "\2\202\1\0\1\202\37\0\2\202\2\21\6\0\2\21"+
    "\1\0\1\21\11\0\1\21\6\0\1\21\13\0\1\363"+
    "\1\364\54\0\1\365\56\0\4\21\6\0\2\21\1\0"+
    "\1\21\11\0\1\21\6\0\1\21\25\0\1\366\37\0"+
    "\1\367\62\0\4\207\6\0\2\207\1\0\1\207\11\0"+
    "\1\207\25\0\4\207\6\0\2\207\1\0\1\207\11\0"+
    "\1\207\6\0\1\370\16\0\4\21\6\0\2\21\1\0"+
    "\1\21\11\0\1\21\6\0\1\370\7\0\1\161\4\0"+
    "\1\162\1\0\1\163\1\164\1\165\1\166\1\167\1\170"+
    "\1\171\2\0\1\171\1\371\1\166\1\0\1\166\1\162"+
    "\1\0\1\172\1\0\2\173\1\174\2\0\1\166\1\172"+
    "\1\170\1\0\1\64\1\0\1\64\17\0\1\205\2\206"+
    "\1\207\6\0\1\372\1\207\1\0\1\207\11\0\1\207"+
    "\25\0\1\350\1\21\1\350\1\21\6\0\2\21\1\0"+
    "\1\21\11\0\1\21\3\0\1\351\1\352\1\0\1\21"+
    "\16\0\1\207\1\21\1\207\1\21\6\0\2\21\1\0"+
    "\1\21\11\0\1\21\6\0\1\370\16\0\1\350\3\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\3\0\1\351"+
    "\1\352\1\0\1\21\16\0\1\207\3\21\6\0\2\21"+
    "\1\0\1\21\11\0\1\21\6\0\1\370\10\0\1\373"+
    "\40\0\1\335\2\0\1\74\15\0\1\223\33\0\1\333"+
    "\2\0\1\72\13\0\1\374\35\0\1\333\2\0\1\72"+
    "\10\0\1\375\40\0\1\335\2\0\1\74\25\0\1\376"+
    "\23\0\1\333\2\0\1\72\51\0\1\333\2\0\1\72"+
    "\14\0\1\162\1\0\1\377\1\0\1\337\1\166\1\167"+
    "\1\170\1\171\2\0\1\171\2\166\1\0\1\166\1\162"+
    "\1\0\1\172\1\0\2\173\1\174\2\0\1\166\1\172"+
    "\1\170\1\0\1\64\1\0\1\64\10\0\1\262\4\0"+
    "\1\u0100\1\0\1\u0101\1\265\1\u0102\1\267\1\u0103\1\271"+
    "\1\171\2\0\1\171\1\343\1\166\1\0\1\166\1\u0100"+
    "\1\0\1\273\1\0\2\173\1\174\2\0\1\267\1\273"+
    "\1\271\1\0\1\64\1\0\1\64\40\0\1\221\11\0"+
    "\1\335\2\0\1\74\41\0\1\u0104\7\0\1\333\2\0"+
    "\1\72\10\0\1\u0105\40\0\1\333\2\0\1\72\11\0"+
    "\1\u0106\100\0\1\u0107\31\0\1\u0108\113\0\1\u0109\1\0"+
    "\1\237\52\0\1\236\1\0\1\237\1\240\7\0\1\u010a"+
    "\4\0\1\u010b\1\0\1\u010c\1\u010d\1\u010e\1\u010f\1\u0110"+
    "\1\u0111\1\u0112\2\0\1\u0112\2\u010f\1\0\1\u010f\1\u010b"+
    "\1\0\1\u0113\1\0\2\u0114\1\u0115\2\0\1\u010f\1\u0113"+
    "\1\u0111\1\0\1\237\1\0\1\237\15\0\1\u0116\1\0"+
    "\1\u0117\1\0\1\u0118\1\0\1\u0119\1\0\1\u011a\2\0"+
    "\1\u011a\2\u011b\1\0\1\u011b\1\u0116\3\0\2\u011c\1\u011d"+
    "\6\0\1\237\1\0\1\237\17\0\1\u011e\2\u011f\1\u0120"+
    "\6\0\2\u0120\1\0\1\u0120\11\0\1\u0120\16\0\1\u010a"+
    "\4\0\1\u010b\1\0\1\u010c\1\u010d\1\u010e\1\u010f\1\u0110"+
    "\1\u0111\1\u0112\2\0\1\u0112\1\u0121\1\u010f\1\0\1\u010f"+
    "\1\u010b\1\0\1\u0113\1\0\2\u0114\1\u0115\2\0\1\u010f"+
    "\1\u0113\1\u0111\1\0\1\237\1\0\1\237\17\0\1\u011e"+
    "\2\u011f\1\u0120\6\0\1\u0122\1\u0120\1\0\1\u0120\11\0"+
    "\1\u0120\16\0\1\u010a\4\0\1\u010b\1\0\1\u010c\1\u010d"+
    "\1\u010e\1\u010f\1\u0110\1\u0111\1\u0112\2\0\1\u0112\1\u0123"+
    "\1\u010f\1\0\1\u010f\1\u010b\1\0\1\u0113\1\0\2\u0114"+
    "\1\u0115\2\0\1\u010f\1\u0113\1\u0111\1\0\1\237\1\0"+
    "\1\237\17\0\1\u011e\2\u011f\1\u0120\6\0\1\u0124\1\u0120"+
    "\1\0\1\u0120\11\0\1\u0120\32\0\1\u0125\6\0\1\u0126"+
    "\45\0\1\u0127\101\0\1\u0128\16\0\1\u0129\2\0\1\u012a"+
    "\110\0\1\u012b\1\0\1\237\52\0\1\u012c\1\0\1\237"+
    "\44\0\1\u012d\50\0\1\u012e\42\0\1\u012f\41\0\1\u0130"+
    "\36\0\1\u0131\2\0\1\134\13\0\1\u0132\35\0\1\u0133"+
    "\2\0\1\136\44\0\1\u0134\4\0\1\u0135\2\0\1\140"+
    "\7\0\1\262\4\0\1\263\1\0\1\u0136\1\267\1\u0137"+
    "\1\267\1\270\1\271\1\272\2\0\1\272\2\267\1\0"+
    "\1\267\1\263\1\0\1\273\1\0\2\274\1\275\2\0"+
    "\1\267\1\273\1\271\1\0\1\133\1\0\1\133\11\0"+
    "\1\u0138\57\0\1\u0139\27\0\1\u013a\27\0\1\u013b\3\267"+
    "\6\0\2\267\1\0\1\267\11\0\1\267\25\0\4\u013b"+
    "\6\0\2\u013b\1\0\1\u013b\11\0\1\u013b\3\0\1\u013c"+
    "\1\u013d\20\0\3\267\1\u013b\6\0\2\u013b\1\0\1\u013b"+
    "\11\0\1\u013b\3\0\1\u013c\1\u013d\20\0\4\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\3\0\1\u013c\1\u013d"+
    "\15\0\1\u013e\1\u013f\101\0\1\u0140\27\0\1\u0141\50\0"+
    "\1\u0142\71\0\1\u0143\37\0\1\u0144\57\0\1\u0145\61\0"+
    "\1\303\7\0\2\303\1\0\1\303\37\0\2\303\2\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\22\0\1\u0146"+
    "\1\u0147\54\0\1\u0148\56\0\4\21\6\0\2\21\1\0"+
    "\1\21\11\0\1\21\34\0\1\u0149\37\0\1\u014a\62\0"+
    "\4\310\6\0\2\310\1\0\1\310\11\0\1\310\25\0"+
    "\4\310\6\0\2\310\1\0\1\310\11\0\1\310\6\0"+
    "\1\u014b\16\0\4\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\6\0\1\u014b\16\0\1\u013b\1\21\1\u013b\1\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\3\0\1\u013c"+
    "\1\u013d\20\0\1\310\1\21\1\310\1\21\6\0\2\21"+
    "\1\0\1\21\11\0\1\21\6\0\1\u014b\16\0\1\u013b"+
    "\3\21\6\0\2\21\1\0\1\21\11\0\1\21\3\0"+
    "\1\u013c\1\u013d\20\0\1\310\3\21\6\0\2\21\1\0"+
    "\1\21\11\0\1\21\6\0\1\u014b\10\0\1\u014c\40\0"+
    "\1\u0135\2\0\1\140\15\0\1\322\33\0\1\u0133\2\0"+
    "\1\136\13\0\1\u014d\35\0\1\u0133\2\0\1\136\10\0"+
    "\1\u014e\40\0\1\u0135\2\0\1\140\25\0\1\u014f\23\0"+
    "\1\u0133\2\0\1\136\51\0\1\u0133\2\0\1\136\14\0"+
    "\1\263\1\0\1\u0150\1\0\1\u0137\1\267\1\270\1\271"+
    "\1\272\2\0\1\272\2\267\1\0\1\267\1\263\1\0"+
    "\1\273\1\0\2\274\1\275\2\0\1\267\1\273\1\271"+
    "\1\0\1\133\1\0\1\133\15\0\1\u0151\1\0\1\u0152"+
    "\1\0\1\u0153\1\0\1\u0154\1\0\1\272\2\0\1\272"+
    "\2\267\1\0\1\267\1\u0151\3\0\2\274\1\275\6\0"+
    "\1\133\1\0\1\133\40\0\1\320\11\0\1\u0135\2\0"+
    "\1\140\41\0\1\u0155\7\0\1\u0133\2\0\1\136\10\0"+
    "\1\u0156\40\0\1\u0133\2\0\1\136\13\0\1\u0157\57\0"+
    "\1\u0158\2\u0159\1\350\6\0\2\350\1\0\1\350\11\0"+
    "\1\350\45\0\1\u015a\34\0\1\u0158\2\u0159\1\350\6\0"+
    "\1\u015b\1\350\1\0\1\350\11\0\1\350\41\0\1\373"+
    "\40\0\1\u0158\2\u0159\1\350\6\0\1\u015c\1\350\1\0"+
    "\1\350\11\0\1\350\26\0\3\166\6\0\2\166\1\0"+
    "\1\166\11\0\1\166\25\0\3\166\1\21\6\0\2\21"+
    "\1\0\1\21\11\0\1\21\3\0\1\351\1\352\1\0"+
    "\1\21\16\0\1\u013b\3\166\6\0\2\166\1\0\1\166"+
    "\11\0\1\166\25\0\4\u013b\6\0\2\u013b\1\0\1\u013b"+
    "\11\0\1\u013b\3\0\1\351\1\352\1\0\1\21\16\0"+
    "\3\166\1\u013b\6\0\2\u013b\1\0\1\u013b\11\0\1\u013b"+
    "\3\0\1\351\1\352\1\0\1\21\16\0\1\u013b\1\21"+
    "\1\u013b\1\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\3\0\1\351\1\352\1\0\1\21\16\0\1\u013b\3\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\3\0\1\351"+
    "\1\352\1\0\1\21\11\0\1\u015d\100\0\1\u015e\31\0"+
    "\1\u015f\60\0\4\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\4\0\1\352\1\0\1\21\17\0\1\u0160\1\u0161"+
    "\105\0\1\351\26\0\1\u0162\6\0\1\u0163\45\0\1\u0164"+
    "\101\0\1\u0165\16\0\1\u0166\2\0\1\166\102\0\1\u0167"+
    "\50\0\1\u0168\42\0\1\u0165\64\0\1\u0169\51\0\1\u016a"+
    "\45\0\1\u016b\43\0\1\u016c\2\0\1\202\76\0\1\u016d"+
    "\42\0\1\u016e\45\0\1\u016f\1\u0170\1\u0171\1\u016f\6\0"+
    "\2\u016f\1\0\1\u016f\11\0\1\u016f\25\0\1\350\1\21"+
    "\1\u013b\1\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\3\0\1\351\1\352\1\0\1\21\16\0\1\207\1\21"+
    "\1\310\1\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\6\0\1\370\51\0\1\335\2\0\1\74\14\0\1\u0172"+
    "\67\0\1\u0173\53\0\1\223\46\0\2\166\6\0\2\166"+
    "\1\0\1\166\11\0\1\166\22\0\1\346\27\0\1\u013a"+
    "\27\0\1\u013b\1\267\1\166\1\267\6\0\2\166\1\0"+
    "\1\166\11\0\1\267\25\0\2\166\1\267\1\u013b\6\0"+
    "\2\u013b\1\0\1\u013b\11\0\1\u013b\3\0\1\351\1\352"+
    "\1\0\1\21\13\0\1\u0174\1\354\51\0\1\u0175\72\0"+
    "\1\u0104\37\0\1\u0176\36\0\1\u0177\2\0\1\240\13\0"+
    "\1\u0178\35\0\1\u0179\2\0\1\242\44\0\1\u017a\4\0"+
    "\1\u017b\2\0\1\244\7\0\1\u010a\4\0\1\u010b\1\0"+
    "\1\u017c\1\u010f\1\u017d\1\u010f\1\u0110\1\u0111\1\u0112\2\0"+
    "\1\u0112\2\u010f\1\0\1\u010f\1\u010b\1\0\1\u0113\1\0"+
    "\2\u0114\1\u0115\2\0\1\u010f\1\u0113\1\u0111\1\0\1\237"+
    "\1\0\1\237\11\0\1\u017e\57\0\1\u017f\27\0\1\u0180"+
    "\27\0\1\u0181\3\u010f\6\0\2\u010f\1\0\1\u010f\11\0"+
    "\1\u010f\25\0\4\u0181\6\0\2\u0181\1\0\1\u0181\11\0"+
    "\1\u0181\3\0\1\u0182\1\u0183\20\0\3\u010f\1\u0181\6\0"+
    "\2\u0181\1\0\1\u0181\11\0\1\u0181\3\0\1\u0182\1\u0183"+
    "\20\0\4\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\3\0\1\u0182\1\u0183\15\0\1\u0184\1\u0185\101\0\1\u0186"+
    "\27\0\1\u0187\50\0\1\u0188\71\0\1\u0189\37\0\1\u018a"+
    "\57\0\1\u018b\61\0\1\u011b\7\0\2\u011b\1\0\1\u011b"+
    "\37\0\2\u011b\2\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\22\0\1\u018c\1\u018d\54\0\1\u018e\65\0\1\u018f"+
    "\37\0\1\u0190\62\0\4\u0120\6\0\2\u0120\1\0\1\u0120"+
    "\11\0\1\u0120\25\0\4\u0120\6\0\2\u0120\1\0\1\u0120"+
    "\11\0\1\u0120\6\0\1\u0191\16\0\4\21\6\0\2\21"+
    "\1\0\1\21\11\0\1\21\6\0\1\u0191\16\0\1\u0181"+
    "\1\21\1\u0181\1\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\3\0\1\u0182\1\u0183\20\0\1\u0120\1\21\1\u0120"+
    "\1\21\6\0\2\21\1\0\1\21\11\0\1\21\6\0"+
    "\1\u0191\16\0\1\u0181\3\21\6\0\2\21\1\0\1\21"+
    "\11\0\1\21\3\0\1\u0182\1\u0183\20\0\1\u0120\3\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\6\0\1\u0191"+
    "\10\0\1\u0192\40\0\1\u017b\2\0\1\244\15\0\1\u012a"+
    "\33\0\1\u0179\2\0\1\242\13\0\1\u0193\35\0\1\u0179"+
    "\2\0\1\242\10\0\1\u0194\40\0\1\u017b\2\0\1\244"+
    "\25\0\1\u0195\23\0\1\u0179\2\0\1\242\51\0\1\u0179"+
    "\2\0\1\242\14\0\1\u010b\1\0\1\u0196\1\0\1\u017d"+
    "\1\u010f\1\u0110\1\u0111\1\u0112\2\0\1\u0112\2\u010f\1\0"+
    "\1\u010f\1\u010b\1\0\1\u0113\1\0\2\u0114\1\u0115\2\0"+
    "\1\u010f\1\u0113\1\u0111\1\0\1\237\1\0\1\237\15\0"+
    "\1\u0197\1\0\1\u0198\1\0\1\u0199\1\0\1\u019a\1\0"+
    "\1\u0112\2\0\1\u0112\2\u010f\1\0\1\u010f\1\u0197\3\0"+
    "\2\u0114\1\u0115\6\0\1\237\1\0\1\237\40\0\1\u0128"+
    "\11\0\1\u017b\2\0\1\244\41\0\1\u019b\7\0\1\u0179"+
    "\2\0\1\242\10\0\1\u019c\40\0\1\u0179\2\0\1\242"+
    "\13\0\1\u019d\57\0\1\u019e\2\u019f\1\u013b\6\0\2\u013b"+
    "\1\0\1\u013b\11\0\1\u013b\45\0\1\u01a0\34\0\1\u019e"+
    "\2\u019f\1\u013b\6\0\1\u01a1\1\u013b\1\0\1\u013b\11\0"+
    "\1\u013b\41\0\1\u014c\40\0\1\u019e\2\u019f\1\u013b\6\0"+
    "\1\u01a2\1\u013b\1\0\1\u013b\11\0\1\u013b\26\0\3\267"+
    "\6\0\2\267\1\0\1\267\11\0\1\267\25\0\3\267"+
    "\1\21\6\0\2\21\1\0\1\21\11\0\1\21\3\0"+
    "\1\u013c\1\u013d\13\0\1\u01a3\100\0\1\u01a4\31\0\1\u01a5"+
    "\60\0\4\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\4\0\1\u013d\21\0\1\u01a6\1\u01a7\105\0\1\u013c\26\0"+
    "\1\u01a8\6\0\1\u01a9\45\0\1\u01aa\101\0\1\u01ab\16\0"+
    "\1\u01ac\2\0\1\267\102\0\1\u01ad\50\0\1\u01ae\42\0"+
    "\1\u01ab\64\0\1\u01af\51\0\1\u01b0\45\0\1\u01b1\43\0"+
    "\1\u01b2\2\0\1\303\76\0\1\u01b3\42\0\1\u01b4\45\0"+
    "\1\u01b5\1\u01b6\1\u01b7\1\u01b5\6\0\2\u01b5\1\0\1\u01b5"+
    "\11\0\1\u01b5\60\0\1\u0135\2\0\1\140\14\0\1\u01b8"+
    "\67\0\1\u01b9\53\0\1\322\46\0\2\267\6\0\2\267"+
    "\1\0\1\267\11\0\1\267\22\0\1\u0139\61\0\1\267"+
    "\7\0\2\267\1\0\1\267\37\0\2\267\2\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\3\0\1\u013c\1\u013d"+
    "\15\0\1\u01ba\1\u013f\51\0\1\u01bb\72\0\1\u0155\41\0"+
    "\1\u01bc\56\0\4\350\6\0\2\350\1\0\1\350\11\0"+
    "\1\350\25\0\4\350\6\0\2\350\1\0\1\350\11\0"+
    "\1\350\4\0\1\352\1\0\1\21\37\0\1\223\33\0"+
    "\1\350\1\21\1\350\1\21\6\0\2\21\1\0\1\21"+
    "\11\0\1\21\4\0\1\352\1\0\1\21\16\0\1\350"+
    "\3\21\6\0\2\21\1\0\1\21\11\0\1\21\4\0"+
    "\1\352\1\0\1\21\12\0\1\u01bd\3\0\4\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\3\0\1\351\1\352"+
    "\1\0\1\21\13\0\1\u01be\2\0\4\21\6\0\2\21"+
    "\1\0\1\21\11\0\1\21\3\0\1\351\1\352\1\0"+
    "\1\21\16\0\4\21\6\0\2\21\1\0\1\21\10\0"+
    "\1\u01bf\1\21\3\0\1\351\1\352\1\0\1\21\16\0"+
    "\3\u01c0\7\0\1\u01c0\1\u01c1\13\0\1\u01c0\30\0\1\u01c0"+
    "\7\0\1\u01c0\1\0\1\u01c0\31\0\1\166\5\0\4\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\3\0\1\351"+
    "\1\352\1\0\1\21\15\0\1\166\4\21\6\0\2\21"+
    "\1\0\1\21\11\0\1\21\3\0\1\351\1\352\1\0"+
    "\1\21\13\0\1\u01c2\2\0\4\21\6\0\2\21\1\0"+
    "\1\21\11\0\1\21\3\0\1\351\1\352\1\0\1\21"+
    "\10\0\1\u01c3\5\0\4\21\6\0\2\21\1\0\1\21"+
    "\11\0\1\21\3\0\1\351\1\352\1\0\1\21\16\0"+
    "\4\21\3\0\1\u01c4\2\0\2\21\1\0\1\21\11\0"+
    "\1\21\3\0\1\351\1\352\1\0\1\21\16\0\4\21"+
    "\6\0\2\21\1\0\1\21\3\0\1\u0165\5\0\1\21"+
    "\3\0\1\351\1\352\1\0\1\21\16\0\4\21\6\0"+
    "\2\21\1\0\1\21\5\0\1\u01c5\3\0\1\21\3\0"+
    "\1\351\1\352\1\0\1\21\13\0\1\u01c6\2\0\4\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\6\0\1\21"+
    "\15\0\1\202\4\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\6\0\1\21\13\0\1\u01c7\2\0\4\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\6\0\1\21\16\0"+
    "\4\21\3\0\1\u01c8\2\0\2\21\1\0\1\21\11\0"+
    "\1\21\6\0\1\21\16\0\4\21\6\0\2\21\1\0"+
    "\1\21\5\0\1\u01c9\3\0\1\21\6\0\1\21\10\0"+
    "\1\u01ca\5\0\4\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\6\0\1\21\16\0\4\202\6\0\2\202\1\0"+
    "\1\202\11\0\1\202\25\0\3\u01cb\1\202\6\0\1\u01cb"+
    "\1\u01cc\1\0\1\202\11\0\1\u01cb\25\0\3\202\1\u01cb"+
    "\6\0\1\202\1\u01cb\1\0\1\u01cb\11\0\1\202\21\0"+
    "\1\u01cd\53\0\1\u01ce\66\0\1\u01a8\6\0\1\u0163\32\0"+
    "\1\u01cf\57\0\1\u01d0\57\0\1\u01d1\2\u01d2\1\u0181\6\0"+
    "\2\u0181\1\0\1\u0181\11\0\1\u0181\45\0\1\u01d3\34\0"+
    "\1\u01d1\2\u01d2\1\u0181\6\0\1\u01d4\1\u0181\1\0\1\u0181"+
    "\11\0\1\u0181\41\0\1\u0192\40\0\1\u01d1\2\u01d2\1\u0181"+
    "\6\0\1\u01d5\1\u0181\1\0\1\u0181\11\0\1\u0181\26\0"+
    "\3\u010f\6\0\2\u010f\1\0\1\u010f\11\0\1\u010f\25\0"+
    "\3\u010f\1\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\3\0\1\u0182\1\u0183\13\0\1\u01d6\100\0\1\u01d7\31\0"+
    "\1\u01d8\60\0\4\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\4\0\1\u0183\21\0\1\u01d9\1\u01da\105\0\1\u0182"+
    "\26\0\1\u01db\6\0\1\u01dc\45\0\1\u01dd\101\0\1\u01de"+
    "\16\0\1\u01df\2\0\1\u010f\102\0\1\u01e0\50\0\1\u01e1"+
    "\42\0\1\u01de\64\0\1\u01e2\51\0\1\u01e3\45\0\1\u01e4"+
    "\43\0\1\u01e5\2\0\1\u011b\76\0\1\u01e6\42\0\1\u01e7"+
    "\45\0\1\u01e8\1\u01e9\1\u01ea\1\u01e8\6\0\2\u01e8\1\0"+
    "\1\u01e8\11\0\1\u01e8\60\0\1\u017b\2\0\1\244\14\0"+
    "\1\u01eb\67\0\1\u01ec\53\0\1\u012a\46\0\2\u010f\6\0"+
    "\2\u010f\1\0\1\u010f\11\0\1\u010f\22\0\1\u017f\61\0"+
    "\1\u010f\7\0\2\u010f\1\0\1\u010f\37\0\2\u010f\2\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\3\0\1\u0182"+
    "\1\u0183\15\0\1\u01ed\1\u0185\51\0\1\u01ee\72\0\1\u019b"+
    "\41\0\1\u01ef\56\0\4\u013b\6\0\2\u013b\1\0\1\u013b"+
    "\11\0\1\u013b\25\0\4\u013b\6\0\2\u013b\1\0\1\u013b"+
    "\11\0\1\u013b\4\0\1\u013d\41\0\1\322\33\0\1\u013b"+
    "\1\21\1\u013b\1\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\4\0\1\u013d\20\0\1\u013b\3\21\6\0\2\21"+
    "\1\0\1\21\11\0\1\21\4\0\1\u013d\14\0\1\u01f0"+
    "\3\0\4\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\3\0\1\u013c\1\u013d\15\0\1\u01f1\2\0\4\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\3\0\1\u013c\1\u013d"+
    "\20\0\4\21\6\0\2\21\1\0\1\21\10\0\1\u01f2"+
    "\1\21\3\0\1\u013c\1\u013d\20\0\3\u01f3\7\0\1\u01f3"+
    "\1\u01f4\13\0\1\u01f3\30\0\1\u01f3\7\0\1\u01f3\1\0"+
    "\1\u01f3\31\0\1\267\5\0\4\21\6\0\2\21\1\0"+
    "\1\21\11\0\1\21\3\0\1\u013c\1\u013d\17\0\1\267"+
    "\4\21\6\0\2\21\1\0\1\21\11\0\1\21\3\0"+
    "\1\u013c\1\u013d\15\0\1\u01f5\2\0\4\21\6\0\2\21"+
    "\1\0\1\21\11\0\1\21\3\0\1\u013c\1\u013d\12\0"+
    "\1\u01f6\5\0\4\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\3\0\1\u013c\1\u013d\20\0\4\21\3\0\1\u01f7"+
    "\2\0\2\21\1\0\1\21\11\0\1\21\3\0\1\u013c"+
    "\1\u013d\20\0\4\21\6\0\2\21\1\0\1\21\3\0"+
    "\1\u01ab\5\0\1\21\3\0\1\u013c\1\u013d\20\0\4\21"+
    "\6\0\2\21\1\0\1\21\5\0\1\u01f8\3\0\1\21"+
    "\3\0\1\u013c\1\u013d\15\0\1\u01f9\2\0\4\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\24\0\1\303\4\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\22\0\1\u01fa"+
    "\2\0\4\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\25\0\4\21\3\0\1\u01fb\2\0\2\21\1\0\1\21"+
    "\11\0\1\21\25\0\4\21\6\0\2\21\1\0\1\21"+
    "\5\0\1\u01fc\3\0\1\21\17\0\1\u01fd\5\0\4\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\25\0\4\303"+
    "\6\0\2\303\1\0\1\303\11\0\1\303\25\0\3\u01fe"+
    "\1\303\6\0\1\u01fe\1\u01ff\1\0\1\303\11\0\1\u01fe"+
    "\25\0\3\303\1\u01fe\6\0\1\303\1\u01fe\1\0\1\u01fe"+
    "\11\0\1\303\21\0\1\u0200\53\0\1\u0201\75\0\1\u01a9"+
    "\32\0\1\u0202\56\0\1\u0203\55\0\1\u01c2\77\0\1\u0204"+
    "\50\0\1\166\40\0\4\u016f\6\0\2\u016f\1\0\1\u016f"+
    "\11\0\1\u016f\25\0\1\u0205\52\0\1\u0206\67\0\1\u01c5"+
    "\53\0\1\166\37\0\1\u0207\101\0\1\u0208\32\0\1\u0209"+
    "\66\0\1\202\37\0\1\u020a\72\0\1\u01c9\43\0\4\u020b"+
    "\6\0\2\u020b\1\0\1\u020b\11\0\1\u020b\6\0\1\21"+
    "\16\0\1\u020c\3\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\6\0\1\21\15\0\1\223\47\0\1\u020d\56\0"+
    "\1\223\56\0\1\u020e\56\0\4\u0181\6\0\2\u0181\1\0"+
    "\1\u0181\11\0\1\u0181\25\0\4\u0181\6\0\2\u0181\1\0"+
    "\1\u0181\11\0\1\u0181\4\0\1\u0183\41\0\1\u012a\33\0"+
    "\1\u0181\1\21\1\u0181\1\21\6\0\2\21\1\0\1\21"+
    "\11\0\1\21\4\0\1\u0183\20\0\1\u0181\3\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\4\0\1\u0183\14\0"+
    "\1\u020f\3\0\4\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\3\0\1\u0182\1\u0183\15\0\1\u0210\2\0\4\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\3\0\1\u0182"+
    "\1\u0183\20\0\4\21\6\0\2\21\1\0\1\21\10\0"+
    "\1\u0211\1\21\3\0\1\u0182\1\u0183\20\0\3\u0212\7\0"+
    "\1\u0212\1\u0213\13\0\1\u0212\30\0\1\u0212\7\0\1\u0212"+
    "\1\0\1\u0212\31\0\1\u010f\5\0\4\21\6\0\2\21"+
    "\1\0\1\21\11\0\1\21\3\0\1\u0182\1\u0183\17\0"+
    "\1\u010f\4\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\3\0\1\u0182\1\u0183\15\0\1\u0214\2\0\4\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\3\0\1\u0182\1\u0183"+
    "\12\0\1\u0215\5\0\4\21\6\0\2\21\1\0\1\21"+
    "\11\0\1\21\3\0\1\u0182\1\u0183\20\0\4\21\3\0"+
    "\1\u0216\2\0\2\21\1\0\1\21\11\0\1\21\3\0"+
    "\1\u0182\1\u0183\20\0\4\21\6\0\2\21\1\0\1\21"+
    "\3\0\1\u01de\5\0\1\21\3\0\1\u0182\1\u0183\20\0"+
    "\4\21\6\0\2\21\1\0\1\21\5\0\1\u0217\3\0"+
    "\1\21\3\0\1\u0182\1\u0183\15\0\1\u0218\2\0\4\21"+
    "\6\0\2\21\1\0\1\21\11\0\1\21\24\0\1\u011b"+
    "\4\21\6\0\2\21\1\0\1\21\11\0\1\21\22\0"+
    "\1\u0219\2\0\4\21\6\0\2\21\1\0\1\21\11\0"+
    "\1\21\25\0\4\21\3\0\1\u021a\2\0\2\21\1\0"+
    "\1\21\11\0\1\21\25\0\4\21\6\0\2\21\1\0"+
    "\1\21\5\0\1\u021b\3\0\1\21\17\0\1\u021c\5\0"+
    "\4\21\6\0\2\21\1\0\1\21\11\0\1\21\25\0"+
    "\4\u011b\6\0\2\u011b\1\0\1\u011b\11\0\1\u011b\25\0"+
    "\3\u021d\1\u011b\6\0\1\u021d\1\u021e\1\0\1\u011b\11\0"+
    "\1\u021d\25\0\3\u011b\1\u021d\6\0\1\u011b\1\u021d\1\0"+
    "\1\u021d\11\0\1\u011b\21\0\1\u021f\53\0\1\u0220\75\0"+
    "\1\u01dc\32\0\1\u0221\56\0\1\u0222\55\0\1\u01f5\77\0"+
    "\1\u0223\50\0\1\267\40\0\4\u01b5\6\0\2\u01b5\1\0"+
    "\1\u01b5\11\0\1\u01b5\25\0\1\u0224\52\0\1\u0225\67\0"+
    "\1\u01f8\53\0\1\267\37\0\1\u0226\101\0\1\u0227\32\0"+
    "\1\u0228\66\0\1\303\37\0\1\u0229\72\0\1\u01fc\43\0"+
    "\4\u022a\6\0\2\u022a\1\0\1\u022a\11\0\1\u022a\25\0"+
    "\1\u022b\3\21\6\0\2\21\1\0\1\21\11\0\1\21"+
    "\24\0\1\322\47\0\1\u022c\56\0\1\322\57\0\1\u022d"+
    "\76\0\1\166\33\0\1\202\50\0\1\u022e\52\0\1\u022f"+
    "\103\0\1\202\27\0\1\u0230\52\0\1\u0231\56\0\1\373"+
    "\54\0\1\u0232\55\0\1\u0214\77\0\1\u0233\50\0\1\u010f"+
    "\40\0\4\u01e8\6\0\2\u01e8\1\0\1\u01e8\11\0\1\u01e8"+
    "\25\0\1\u0234\52\0\1\u0235\67\0\1\u0217\53\0\1\u010f"+
    "\37\0\1\u0236\101\0\1\u0237\32\0\1\u0238\66\0\1\u011b"+
    "\37\0\1\u0239\72\0\1\u021b\43\0\4\u023a\6\0\2\u023a"+
    "\1\0\1\u023a\11\0\1\u023a\25\0\1\u023b\3\21\6\0"+
    "\2\21\1\0\1\21\11\0\1\21\24\0\1\u012a\47\0"+
    "\1\u023c\56\0\1\u012a\57\0\1\u023d\76\0\1\267\33\0"+
    "\1\303\50\0\1\u023e\52\0\1\u023f\103\0\1\303\27\0"+
    "\1\u0240\52\0\1\u0241\56\0\1\u014c\113\0\1\331\2\0"+
    "\1\65\15\0\1\166\51\0\1\166\57\0\1\202\51\0"+
    "\1\202\57\0\1\u0242\76\0\1\u010f\33\0\1\u011b\50\0"+
    "\1\u0243\52\0\1\u0244\103\0\1\u011b\27\0\1\u0245\52\0"+
    "\1\u0246\56\0\1\u0192\113\0\1\u0131\2\0\1\134\15\0"+
    "\1\267\51\0\1\267\57\0\1\303\51\0\1\303\113\0"+
    "\1\u0177\2\0\1\240\15\0\1\u010f\51\0\1\u010f\57\0"+
    "\1\u011b\51\0\1\u011b\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25785];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\17\1\1\11\5\1\75\0\1\11\37\0\3\1"+
    "\10\0\1\1\2\0\1\1\3\0\2\1\2\0\4\1"+
    "\47\0\3\1\10\0\1\1\2\0\1\1\3\0\6\1"+
    "\22\0\1\1\1\0\4\1\3\0\1\1\17\0\3\1"+
    "\7\0\1\1\12\0\3\1\10\0\1\1\2\0\1\1"+
    "\3\0\6\1\22\0\1\1\3\0\1\1\27\0\1\1"+
    "\5\0\1\1\1\0\5\1\2\0\15\1\16\0\1\1"+
    "\3\0\1\1\27\0\1\1\5\0\1\1\1\0\5\1"+
    "\2\0\15\1\26\0\2\1\5\0\1\1\1\0\5\1"+
    "\2\0\15\1\26\0\2\1\13\0\2\1\20\0\2\1"+
    "\13\0\2\1\16\0\2\1\13\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[582];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  void echo() {
    int len = yylength();       // Find length of current lexeme
    for (int i=0; i<len; i++) { // Run through each character in turn
      char c = yycharat(i);
      switch (c) {              // and translate as appropriate ...
        case '<' : System.out.print("&lt;");  break;
        case '>' : System.out.print("&gt;");  break;
        case '&' : System.out.print("&amp;"); break;
        default  : System.out.print(c);       break;
      }
    }
  }
  void tag(String cl) {
    System.out.print("<span class=\"" + cl + "\">");
    echo();
    System.out.print("</span>");
  }
  void date() { tag("date"); }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  HighlightDates(java.io.Reader in) {
    System.out.println("<html>");
  System.out.println("<head>");
  System.out.println("<title>My Syntax Colored Web Page</title>");
  System.out.println("<style type=\"text/css\">");
  System.out.println("  body     {white-space:pre;");
  System.out.println("            background-color:#ffffcc;");
  System.out.println("            color:black;");
  System.out.println("            font-family:\"Lucida Console\",\"Courier New\",Monotype}");
  System.out.println("  .date {background-color: #FFFF00}");
  System.out.println("</style>");
  System.out.println("</head>");
  System.out.println("<body>");
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  HighlightDates(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      System.out.println("</body>");
  System.out.println("</html>");

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { echo();
          }
        case 4: break;
        case 3: 
          { date();
          }
        case 5: break;
        case 1: 
          { System.out.print(yytext());
          }
        case 6: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java HighlightDates <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        HighlightDates scanner = null;
        try {
          scanner = new HighlightDates( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
